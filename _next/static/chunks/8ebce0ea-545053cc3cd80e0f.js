"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[375],{764:function(t,e,r){var i=r(9758),a=r(8336),s=r(4606),n=r(9591),o=r(5151),c=r(2352),f=r(1990),d=r(9027),l=r(1876).Buffer;class h extends Error{constructor(t){super(t),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(t){const e=new h(t.message);return e.code=t.code,e.data=t.data,e.caller=t.caller,e.stack=t.stack,e}get isIsomorphicGitError(){return!0}}class u extends h{constructor(t){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${t}`),this.code=this.name=u.code,this.data={message:t}}}u.code="InternalError";class g extends h{constructor(t){super(`The filepath "${t}" contains unsafe character sequences`),this.code=this.name=g.code,this.data={filepath:t}}}g.code="UnsafeFilepathError";class w{constructor(t){this.buffer=t,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(t){this._start=t}slice(t){const e=this.buffer.slice(this._start,this._start+t);return this._start+=t,e}toString(t,e){const r=this.buffer.toString(t,this._start,this._start+e);return this._start+=e,r}write(t,e,r){const i=this.buffer.write(t,this._start,e,r);return this._start+=e,i}copy(t,e,r){const i=t.copy(this.buffer,this._start,e,r);return this._start+=i,i}readUInt8(){const t=this.buffer.readUInt8(this._start);return this._start+=1,t}writeUInt8(t){const e=this.buffer.writeUInt8(t,this._start);return this._start+=1,e}readUInt16BE(){const t=this.buffer.readUInt16BE(this._start);return this._start+=2,t}writeUInt16BE(t){const e=this.buffer.writeUInt16BE(t,this._start);return this._start+=2,e}readUInt32BE(){const t=this.buffer.readUInt32BE(this._start);return this._start+=4,t}writeUInt32BE(t){const e=this.buffer.writeUInt32BE(t,this._start);return this._start+=4,e}}function p(t,e){return-(t<e)||+(t>e)}function m(t,e){return p(t.path,e.path)}function y(t){let e=t>0?t>>12:0;4!==e&&8!==e&&10!==e&&14!==e&&(e=8);let r=511&t;return r=73&r?493:420,8!==e&&(r=0),(e<<12)+r}const b=2**32;function x(t,e,r,i){if(void 0!==t&&void 0!==e)return[t,e];void 0===r&&(r=i.valueOf());const a=Math.floor(r/1e3);return[a,1e6*(r-1e3*a)]}function $(t){const[e,r]=x(t.ctimeSeconds,t.ctimeNanoseconds,t.ctimeMs,t.ctime),[i,a]=x(t.mtimeSeconds,t.mtimeNanoseconds,t.mtimeMs,t.mtime);return{ctimeSeconds:e%b,ctimeNanoseconds:r%b,mtimeSeconds:i%b,mtimeNanoseconds:a%b,dev:t.dev%b,ino:t.ino%b,mode:y(t.mode%b),uid:t.uid%b,gid:t.gid%b,size:t.size>-1?t.size%b:0}}let v=null;async function _(t){return null===v&&(v=await async function(){try{if("da39a3ee5e6b4b0d3255bfef95601890afd80709"===await E(new Uint8Array([])))return!0}catch(t){}return!1}()),v?E(t):function(t){return(new a).update(t).digest("hex")}(t)}async function E(t){return function(t){let e="";for(const r of new Uint8Array(t))r<16&&(e+="0"),e+=r.toString(16);return e}(await crypto.subtle.digest("SHA-1",t))}class k{constructor(t){this._dirty=!1,this._entries=t||new Map}static async from(t){if(l.isBuffer(t))return k.fromBuffer(t);if(null===t)return new k(null);throw new u("invalid type passed to GitIndex.from")}static async fromBuffer(t){const e=await _(t.slice(0,-20)),r=t.slice(-20).toString("hex");if(r!==e)throw new u(`Invalid checksum in GitIndex buffer: expected ${r} but saw ${e}`);const i=new w(t),a=new Map,s=i.toString("utf8",4);if("DIRC"!==s)throw new u(`Inavlid dircache magic file number: ${s}`);const n=i.readUInt32BE();if(2!==n)throw new u(`Unsupported dircache version: ${n}`);const o=i.readUInt32BE();let c=0;for(;!i.eof()&&c<o;){const e={};e.ctimeSeconds=i.readUInt32BE(),e.ctimeNanoseconds=i.readUInt32BE(),e.mtimeSeconds=i.readUInt32BE(),e.mtimeNanoseconds=i.readUInt32BE(),e.dev=i.readUInt32BE(),e.ino=i.readUInt32BE(),e.mode=i.readUInt32BE(),e.uid=i.readUInt32BE(),e.gid=i.readUInt32BE(),e.size=i.readUInt32BE(),e.oid=i.slice(20).toString("hex");const r=i.readUInt16BE();e.flags=(f=r,{assumeValid:Boolean(32768&f),extended:Boolean(16384&f),stage:(12288&f)>>12,nameLength:4095&f});const s=t.indexOf(0,i.tell()+1)-i.tell();if(s<1)throw new u(`Got a path length of: ${s}`);if(e.path=i.toString("utf8",s),e.path.includes("..\\")||e.path.includes("../"))throw new g(e.path);let n=8-(i.tell()-12)%8;for(0===n&&(n=8);n--;){const t=i.readUInt8();if(0!==t)throw new u(`Expected 1-8 null characters but got '${t}' after ${e.path}`);if(i.eof())throw new u("Unexpected end of file")}a.set(e.path,e),c++}var f;return new k(a)}get entries(){return[...this._entries.values()].sort(m)}get entriesMap(){return this._entries}*[Symbol.iterator](){for(const t of this.entries)yield t}insert({filepath:t,stats:e,oid:r}){e=$(e);const i=l.from(t),a={ctimeSeconds:e.ctimeSeconds,ctimeNanoseconds:e.ctimeNanoseconds,mtimeSeconds:e.mtimeSeconds,mtimeNanoseconds:e.mtimeNanoseconds,dev:e.dev,ino:e.ino,mode:e.mode||33188,uid:e.uid,gid:e.gid,size:e.size,path:t,oid:r,flags:{assumeValid:!1,extended:!1,stage:0,nameLength:i.length<4095?i.length:4095}};this._entries.set(a.path,a),this._dirty=!0}delete({filepath:t}){if(this._entries.has(t))this._entries.delete(t);else for(const e of this._entries.keys())e.startsWith(t+"/")&&this._entries.delete(e);this._dirty=!0}clear(){this._entries.clear(),this._dirty=!0}has({filepath:t}){return this._entries.has(t)}render(){return this.entries.map((t=>`${t.mode.toString(8)} ${t.oid}    ${t.path}`)).join("\n")}async toObject(){const t=l.alloc(12),e=new w(t);e.write("DIRC",4,"utf8"),e.writeUInt32BE(2),e.writeUInt32BE(this.entries.length);const r=l.concat(this.entries.map((t=>{const e=l.from(t.path),r=8*Math.ceil((62+e.length+1)/8),i=l.alloc(r),a=new w(i),s=$(t);return a.writeUInt32BE(s.ctimeSeconds),a.writeUInt32BE(s.ctimeNanoseconds),a.writeUInt32BE(s.mtimeSeconds),a.writeUInt32BE(s.mtimeNanoseconds),a.writeUInt32BE(s.dev),a.writeUInt32BE(s.ino),a.writeUInt32BE(s.mode),a.writeUInt32BE(s.uid),a.writeUInt32BE(s.gid),a.writeUInt32BE(s.size),a.write(t.oid,20,"hex"),a.writeUInt16BE(function(t){const e=t.flags;return e.extended=!1,e.nameLength=Math.min(l.from(t.path).length,4095),(e.assumeValid?32768:0)+(e.extended?16384:0)+((3&e.stage)<<12)+(4095&e.nameLength)}(t)),a.write(t.path,e.length,"utf8"),i}))),i=l.concat([t,r]),a=await _(i);return l.concat([i,l.from(a,"hex")])}}function S(t,e){const r=$(t),i=$(e);return r.mode!==i.mode||r.mtimeSeconds!==i.mtimeSeconds||r.ctimeSeconds!==i.ctimeSeconds||r.uid!==i.uid||r.gid!==i.gid||r.ino!==i.ino||r.size!==i.size}let j=null;const P=Symbol("IndexCache");class A{static async acquire({fs:t,gitdir:e,cache:r},a){r[P]||(r[P]={map:new Map,stats:new Map});const s=`${e}/index`;let n;return null===j&&(j=new i({maxPending:1/0})),await j.acquire(s,(async()=>{await async function(t,e,r){const i=r.stats.get(e);if(void 0===i)return!0;const a=await t.lstat(e);return null!==i&&null!==a&&S(i,a)}(t,s,r[P])&&await async function(t,e,r){const i=await t.lstat(e),a=await t.read(e),s=await k.from(a);r.map.set(e,s),r.stats.set(e,i)}(t,s,r[P]);const e=r[P].map.get(s);if(n=await a(e),e._dirty){const i=await e.toObject();await t.write(s,i),r[P].stats.set(s,await t.lstat(s)),e._dirty=!1}})),n}}function R(t){const e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return e>-1&&(t=t.slice(e+1)),t}function I(t){const e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return-1===e?".":0===e?"/":t.slice(0,e)}function O(t){const e=new Map,r=function(t){if(!e.has(t)){const i={type:"tree",fullpath:t,basename:R(t),metadata:{},children:[]};e.set(t,i),i.parent=r(I(t)),i.parent&&i.parent!==i&&i.parent.children.push(i)}return e.get(t)},i=function(t,i){if(!e.has(t)){const a={type:"blob",fullpath:t,basename:R(t),metadata:i,parent:r(I(t)),children:[]};a.parent&&a.parent.children.push(a),e.set(t,a)}return e.get(t)};r(".");for(const a of t)i(a.path,a);return e}class B{constructor({fs:t,gitdir:e,cache:r}){this.treePromise=A.acquire({fs:t,gitdir:e,cache:r},(async function(t){return O(t.entries)}));const i=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._oid=!1}async type(){return i.type(this)}async mode(){return i.mode(this)}async stat(){return i.stat(this)}async content(){return i.content(this)}async oid(){return i.oid(this)}}}async readdir(t){const e=t._fullpath,r=(await this.treePromise).get(e);if(!r)return null;if("blob"===r.type)return null;if("tree"!==r.type)throw new Error(`ENOTDIR: not a directory, scandir '${e}'`);const i=r.children.map((t=>t.fullpath));return i.sort(p),i}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){const e=(await this.treePromise).get(t._fullpath);if(!e)throw new Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);const r="tree"===e.type?{}:$(e.metadata);t._type="tree"===e.type?"tree":function(t){switch(t){case 16384:return"tree";case 33188:case 33261:case 40960:return"blob";case 57344:return"commit"}throw new u(`Unexpected GitTree entry mode: ${t.toString(8)}`)}(r.mode),t._mode=r.mode,"tree"===e.type?t._stat=void 0:t._stat=r}return t._stat}async content(t){}async oid(t){if(!1===t._oid){const e=(await this.treePromise).get(t._fullpath);t._oid=e.metadata.oid}return t._oid}}const N=Symbol("GitWalkSymbol");function C(){const t=Object.create(null);return Object.defineProperty(t,N,{value:function({fs:t,gitdir:e,cache:r}){return new B({fs:t,gitdir:e,cache:r})}}),Object.freeze(t),t}class U extends h{constructor(t){super(`Could not find ${t}.`),this.code=this.name=U.code,this.data={what:t}}}U.code="NotFoundError";class D extends h{constructor(t,e,r,i){super(`Object ${t} ${i?`at ${i}`:""}was anticipated to be a ${r} but it is a ${e}.`),this.code=this.name=D.code,this.data={oid:t,actual:e,expected:r,filepath:i}}}D.code="ObjectTypeError";class M extends h{constructor(t){super(`Expected a 40-char hex object id but saw "${t}".`),this.code=this.name=M.code,this.data={value:t}}}M.code="InvalidOidError";class T extends h{constructor(t){super(`Could not find a fetch refspec for remote "${t}". Make sure the config file has an entry like the following:\n[remote "${t}"]\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n`),this.code=this.name=T.code,this.data={remote:t}}}T.code="NoRefspecError";class F{constructor(t){if(this.refs=new Map,this.parsedConfig=[],t){let e=null;this.parsedConfig=t.trim().split("\n").map((t=>{if(/^\s*#/.test(t))return{line:t,comment:!0};const r=t.indexOf(" ");if(t.startsWith("^")){const r=t.slice(1);return this.refs.set(e+"^{}",r),{line:t,ref:e,peeled:r}}{const i=t.slice(0,r);return e=t.slice(r+1),this.refs.set(e,i),{line:t,ref:e,oid:i}}}))}return this}static from(t){return new F(t)}delete(t){this.parsedConfig=this.parsedConfig.filter((e=>e.ref!==t)),this.refs.delete(t)}toString(){return this.parsedConfig.map((({line:t})=>t)).join("\n")+"\n"}}class H{constructor({remotePath:t,localPath:e,force:r,matchPrefix:i}){Object.assign(this,{remotePath:t,localPath:e,force:r,matchPrefix:i})}static from(t){const[e,r,i,a,s]=t.match(/^(\+?)(.*?)(\*?):(.*?)(\*?)$/).slice(1),n="+"===e,o="*"===i;if(o!==("*"===s))throw new u("Invalid refspec");return new H({remotePath:r,localPath:a,force:n,matchPrefix:o})}translate(t){if(this.matchPrefix){if(t.startsWith(this.remotePath))return this.localPath+t.replace(this.remotePath,"")}else if(t===this.remotePath)return this.localPath;return null}reverseTranslate(t){if(this.matchPrefix){if(t.startsWith(this.localPath))return this.remotePath+t.replace(this.localPath,"")}else if(t===this.localPath)return this.remotePath;return null}}class z{constructor(t=[]){this.rules=t}static from(t){const e=[];for(const r of t)e.push(H.from(r));return new z(e)}add(t){const e=H.from(t);this.rules.push(e)}translate(t){const e=[];for(const r of this.rules)for(const i of t){const t=r.translate(i);t&&e.push([i,t])}return e}translateOne(t){let e=null;for(const r of this.rules){const i=r.translate(t);i&&(e=i)}return e}localNamespaces(){return this.rules.filter((t=>t.matchPrefix)).map((t=>t.localPath.replace(/\/$/,"")))}}function G(t,e){const r=t.replace(/\^\{\}$/,""),i=e.replace(/\^\{\}$/,""),a=-(r<i)||+(r>i);return 0===a?t.endsWith("^{}")?1:-1:a}function W(t){return t.replace(/\/\.\//g,"/").replace(/\/{2,}/g,"/").replace(/^\/\.$/,"/").replace(/^\.\/$/,".").replace(/^\.\//,"").replace(/\/\.$/,"").replace(/(.+)\/$/,"$1").replace(/^$/,".")}function K(...t){return W(t.map(W).join("/"))}const q=t=>{if("true"===(t=t.trim().toLowerCase())||"yes"===t||"on"===t)return!0;if("false"===t||"no"===t||"off"===t)return!1;throw Error(`Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${t}`)},L={core:{filemode:q,bare:q,logallrefupdates:q,symlinks:q,ignorecase:q,bigFileThreshold:t=>{t=t.toLowerCase();let e=parseInt(t);return t.endsWith("k")&&(e*=1024),t.endsWith("m")&&(e*=1048576),t.endsWith("g")&&(e*=1073741824),e}}},V=/^\[([A-Za-z0-9-.]+)(?: "(.*)")?\]$/,Z=/^[A-Za-z0-9-.]+$/,Y=/^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/,J=/^[A-Za-z][A-Za-z-]*$/,X=/^(.*?)( *[#;].*)$/,Q=t=>{const e=X.exec(t);if(null==e)return t;const[r,i]=e.slice(1);return tt(r)&&tt(i)?`${r}${i}`:r},tt=t=>(t.match(/(?:^|[^\\])"/g)||[]).length%2!==0,et=t=>t.split("").reduce(((t,e,r,i)=>{const a='"'===e&&"\\"!==i[r-1],s="\\"===e&&'"'===i[r+1];return a||s?t:t+e}),""),rt=t=>null!=t?t.toLowerCase():null,it=(t,e,r)=>[rt(t),e,rt(r)].filter((t=>null!=t)).join("."),at=t=>{const e=t.split("."),r=e.shift(),i=e.pop(),a=e.length?e.join("."):void 0;return{section:r,subsection:a,name:i,path:it(r,a,i),sectionPath:it(r,a,null)}};class st{constructor(t){let e=null,r=null;this.parsedConfig=t.split("\n").map((t=>{let i=null,a=null;const s=t.trim(),n=(t=>{const e=V.exec(t);if(null!=e){const[t,r]=e.slice(1);return[t,r]}return null})(s),o=null!=n;if(o)[e,r]=n;else{const t=(t=>{const e=Y.exec(t);if(null!=e){const[t,r="true"]=e.slice(1),i=Q(r);return[t,et(i)]}return null})(s);null!=t&&([i,a]=t)}const c=it(e,r,i);return{line:t,isSection:o,section:e,subsection:r,name:i,value:a,path:c}}))}static from(t){return new st(t)}async get(t,e=!1){const r=at(t).path,i=this.parsedConfig.filter((t=>t.path===r)).map((({section:t,name:e,value:r})=>{const i=L[t]&&L[t][e];return i?i(r):r}));return e?i:i.pop()}async getall(t){return this.get(t,!0)}async getSubsections(t){return this.parsedConfig.filter((e=>e.section===t&&e.isSection)).map((t=>t.subsection))}async deleteSection(t,e){this.parsedConfig=this.parsedConfig.filter((r=>!(r.section===t&&r.subsection===e)))}async append(t,e){return this.set(t,e,!0)}async set(t,e,r=!1){const{section:i,subsection:a,name:s,path:n,sectionPath:o}=at(t),c=(f=this.parsedConfig,d=t=>t.path===n,f.reduce(((t,e,r)=>d(e)?r:t),-1));var f,d;if(null==e)-1!==c&&this.parsedConfig.splice(c,1);else if(-1!==c){const t=this.parsedConfig[c],i=Object.assign({},t,{name:s,value:e,modified:!0});r?this.parsedConfig.splice(c+1,0,i):this.parsedConfig[c]=i}else{const t=this.parsedConfig.findIndex((t=>t.path===o)),r={section:i,subsection:a,name:s,value:e,modified:!0,path:n};if(Z.test(i)&&J.test(s))if(t>=0)this.parsedConfig.splice(t+1,0,r);else{const t={section:i,subsection:a,modified:!0,path:o};this.parsedConfig.push(t,r)}}}toString(){return this.parsedConfig.map((({line:t,section:e,subsection:r,name:i,value:a,modified:s=!1})=>s?null!=i&&null!=a?"string"===typeof a&&/[#;]/.test(a)?`\t${i} = "${a}"`:`\t${i} = ${a}`:null!=r?`[${e} "${r}"]`:`[${e}]`:t)).join("\n")}}class nt{static async get({fs:t,gitdir:e}){const r=await t.read(`${e}/config`,{encoding:"utf8"});return st.from(r)}static async save({fs:t,gitdir:e,config:r}){await t.write(`${e}/config`,r.toString(),{encoding:"utf8"})}}const ot=t=>[`${t}`,`refs/${t}`,`refs/tags/${t}`,`refs/heads/${t}`,`refs/remotes/${t}`,`refs/remotes/${t}/HEAD`],ct=["config","description","index","shallow","commondir"];class ft{static async updateRemoteRefs({fs:t,gitdir:e,remote:r,refs:i,symrefs:a,tags:s,refspecs:n,prune:o=!1,pruneTags:c=!1}){for(const w of i.values())if(!w.match(/[0-9a-f]{40}/))throw new M(w);const f=await nt.get({fs:t,gitdir:e});if(!n){if(0===(n=await f.getall(`remote.${r}.fetch`)).length)throw new T(r);n.unshift(`+HEAD:refs/remotes/${r}/HEAD`)}const d=z.from(n),l=new Map;if(c){const r=await ft.listRefs({fs:t,gitdir:e,filepath:"refs/tags"});await ft.deleteRefs({fs:t,gitdir:e,refs:r.map((t=>`refs/tags/${t}`))})}if(s)for(const w of i.keys())if(w.startsWith("refs/tags")&&!w.endsWith("^{}")&&!(await ft.exists({fs:t,gitdir:e,ref:w}))){const t=i.get(w);l.set(w,t)}const h=d.translate([...i.keys()]);for(const[w,p]of h){const t=i.get(w);l.set(p,t)}const u=d.translate([...a.keys()]);for(const[w,p]of u){const t=a.get(w),e=d.translateOne(t);e&&l.set(p,`ref: ${e}`)}const g=[];if(o){for(const r of d.localNamespaces()){const i=(await ft.listRefs({fs:t,gitdir:e,filepath:r})).map((t=>`${r}/${t}`));for(const t of i)l.has(t)||g.push(t)}g.length>0&&await ft.deleteRefs({fs:t,gitdir:e,refs:g})}for(const[w,p]of l)await t.write(K(e,w),`${p.trim()}\n`,"utf8");return{pruned:g}}static async writeRef({fs:t,gitdir:e,ref:r,value:i}){if(!i.match(/[0-9a-f]{40}/))throw new M(i);await t.write(K(e,r),`${i.trim()}\n`,"utf8")}static async writeSymbolicRef({fs:t,gitdir:e,ref:r,value:i}){await t.write(K(e,r),`ref: ${i.trim()}\n`,"utf8")}static async deleteRef({fs:t,gitdir:e,ref:r}){return ft.deleteRefs({fs:t,gitdir:e,refs:[r]})}static async deleteRefs({fs:t,gitdir:e,refs:r}){await Promise.all(r.map((r=>t.rm(K(e,r)))));let i=await t.read(`${e}/packed-refs`,{encoding:"utf8"});const a=F.from(i),s=a.refs.size;for(const n of r)a.refs.has(n)&&a.delete(n);a.refs.size<s&&(i=a.toString(),await t.write(`${e}/packed-refs`,i,{encoding:"utf8"}))}static async resolve({fs:t,gitdir:e,ref:r,depth:i}){if(void 0!==i&&-1===--i)return r;let a;if(r.startsWith("ref: "))return r=r.slice("ref: ".length),ft.resolve({fs:t,gitdir:e,ref:r,depth:i});if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;const s=await ft.packedRefs({fs:t,gitdir:e}),n=ot(r).filter((t=>!ct.includes(t)));for(const o of n)if(a=await t.read(`${e}/${o}`,{encoding:"utf8"})||s.get(o),a)return ft.resolve({fs:t,gitdir:e,ref:a.trim(),depth:i});throw new U(r)}static async exists({fs:t,gitdir:e,ref:r}){try{return await ft.expand({fs:t,gitdir:e,ref:r}),!0}catch(i){return!1}}static async expand({fs:t,gitdir:e,ref:r}){if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;const i=await ft.packedRefs({fs:t,gitdir:e}),a=ot(r);for(const s of a){if(await t.exists(`${e}/${s}`))return s;if(i.has(s))return s}throw new U(r)}static async expandAgainstMap({ref:t,map:e}){const r=ot(t);for(const i of r)if(await e.has(i))return i;throw new U(t)}static resolveAgainstMap({ref:t,fullref:e=t,depth:r,map:i}){if(void 0!==r&&-1===--r)return{fullref:e,oid:t};if(t.startsWith("ref: "))return t=t.slice("ref: ".length),ft.resolveAgainstMap({ref:t,fullref:e,depth:r,map:i});if(40===t.length&&/[0-9a-f]{40}/.test(t))return{fullref:e,oid:t};const a=ot(t);for(const s of a){const t=i.get(s);if(t)return ft.resolveAgainstMap({ref:t.trim(),fullref:s,depth:r,map:i})}throw new U(t)}static async packedRefs({fs:t,gitdir:e}){const r=await t.read(`${e}/packed-refs`,{encoding:"utf8"});return F.from(r).refs}static async listRefs({fs:t,gitdir:e,filepath:r}){const i=ft.packedRefs({fs:t,gitdir:e});let a=null;try{a=await t.readdirDeep(`${e}/${r}`),a=a.map((t=>t.replace(`${e}/${r}/`,"")))}catch(s){a=[]}for(let n of(await i).keys())n.startsWith(r)&&(n=n.replace(r+"/",""),a.includes(n)||a.push(n));return a.sort(G),a}static async listBranches({fs:t,gitdir:e,remote:r}){return r?ft.listRefs({fs:t,gitdir:e,filepath:`refs/remotes/${r}`}):ft.listRefs({fs:t,gitdir:e,filepath:"refs/heads"})}static async listTags({fs:t,gitdir:e}){return(await ft.listRefs({fs:t,gitdir:e,filepath:"refs/tags"})).filter((t=>!t.endsWith("^{}")))}}function dt(t,e){return p(lt(t),lt(e))}function lt(t){return"040000"===t.mode?t.path+"/":t.path}function ht(t){switch(t){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";case"160000":return"commit"}throw new u(`Unexpected GitTree entry mode: ${t}`)}function ut(t){return!t.oid&&t.sha&&(t.oid=t.sha),t.mode=function(t){if("number"===typeof t&&(t=t.toString(8)),t.match(/^0?4.*/))return"040000";if(t.match(/^1006.*/))return"100644";if(t.match(/^1007.*/))return"100755";if(t.match(/^120.*/))return"120000";if(t.match(/^160.*/))return"160000";throw new u(`Could not understand file mode: ${t}`)}(t.mode),t.type||(t.type=ht(t.mode)),t}class gt{constructor(t){if(l.isBuffer(t))this._entries=function(t){const e=[];let r=0;for(;r<t.length;){const i=t.indexOf(32,r);if(-1===i)throw new u(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next space character.`);const a=t.indexOf(0,r);if(-1===a)throw new u(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next null character.`);let s=t.slice(r,i).toString("utf8");"40000"===s&&(s="040000");const n=ht(s),o=t.slice(i+1,a).toString("utf8");if(o.includes("\\")||o.includes("/"))throw new g(o);const c=t.slice(a+1,a+21).toString("hex");r=a+21,e.push({mode:s,path:o,oid:c,type:n})}return e}(t);else{if(!Array.isArray(t))throw new u("invalid type passed to GitTree constructor");this._entries=t.map(ut)}this._entries.sort(m)}static from(t){return new gt(t)}render(){return this._entries.map((t=>`${t.mode} ${t.type} ${t.oid}    ${t.path}`)).join("\n")}toObject(){const t=[...this._entries];return t.sort(dt),l.concat(t.map((t=>{const e=l.from(t.mode.replace(/^0/,"")),r=l.from(" "),i=l.from(t.path,"utf8"),a=l.from([0]),s=l.from(t.oid,"hex");return l.concat([e,r,i,a,s])})))}entries(){return this._entries}*[Symbol.iterator](){for(const t of this._entries)yield t}}class wt{static wrap({type:t,object:e}){return l.concat([l.from(`${t} ${e.byteLength.toString()}\0`),l.from(e)])}static unwrap(t){const e=t.indexOf(32),r=t.indexOf(0),i=t.slice(0,e).toString("utf8"),a=t.slice(e+1,r).toString("utf8"),s=t.length-(r+1);if(parseInt(a)!==s)throw new u(`Length mismatch: expected ${a} bytes but got ${s} instead.`);return{type:i,object:l.from(t.slice(r+1))}}}function pt(t){let e=0,r=0,i=null;do{i=t.readUInt8(),e|=(127&i)<<r,r+=7}while(128&i);return e}function mt(t,e,r){let i=0,a=0;for(;r--;)1&e&&(i|=t.readUInt8()<<a),e>>=1,a+=8;return i}function yt(t,e){const r=t.readUInt8();if(128&r){const i=mt(t,15&r,4);let a=mt(t,(112&r)>>4,3);return 0===a&&(a=65536),e.slice(i,i+a)}return t.slice(r)}function bt(t){return t[Symbol.asyncIterator]?t[Symbol.asyncIterator]():t[Symbol.iterator]?t[Symbol.iterator]():t.next?t:function(t){let e=[t];return{next:()=>Promise.resolve({done:0===e.length,value:e.pop()}),return:()=>(e=[],{}),[Symbol.asyncIterator](){return this}}}(t)}class xt{constructor(t){this.stream=bt(t),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(t){if(!this.eof())return this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t),this.buffer.slice(this.undoCursor,this.cursor)}async skip(t){this.eof()||(this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:t,value:e}=await this.stream.next();return t&&(this._ended=!0),e&&(e=l.from(e)),e}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(t){this.undoCursor=this.cursor,this.cursor+=t,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(t){if(this._ended)return;const e=[this.buffer];for(;this.cursor+t>$t(e);){const t=await this._next();if(this._ended)break;e.push(t)}this.buffer=l.concat(e)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}function $t(t){return t.reduce(((t,e)=>t+e.length),0)}async function vt(t){let e=await t.byte();const r=e>>4&7;let i,a,s=15&e;if(128&e){let r=4;do{e=await t.byte(),s|=(127&e)<<r,r+=7}while(128&e)}if(6===r){let r=0;i=0;const s=[];do{e=await t.byte(),i|=(127&e)<<r,r+=7,s.push(e)}while(128&e);a=l.from(s)}if(7===r){a=await t.read(20)}return{type:r,length:s,ofs:i,reference:a}}let _t=!1;async function Et(t){return null===_t&&(_t=function(){try{if(new DecompressionStream("deflate"))return!0}catch(t){}return!1}()),_t?async function(t){const e=new DecompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}(t):n.inflate(t)}class kt{constructor(t){Object.assign(this,t),this.offsetCache={}}static async fromIdx({idx:t,getExternalRefDelta:e}){const r=new w(t);if("ff744f63"!==r.slice(4).toString("hex"))return;const i=r.readUInt32BE();if(2!==i)throw new u(`Unable to read version ${i} packfile IDX. (Only version 2 supported)`);if(t.byteLength>2147483648)throw new u("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");r.seek(r.tell()+1020);const a=r.readUInt32BE(),s=[];for(let c=0;c<a;c++){const t=r.slice(20).toString("hex");s[c]=t}r.seek(r.tell()+4*a);const n=new Map;for(let c=0;c<a;c++)n.set(s[c],r.readUInt32BE());const o=r.slice(20).toString("hex");return new kt({hashes:s,crcs:{},offsets:n,packfileSha:o,getExternalRefDelta:e})}static async fromPack({pack:t,getExternalRefDelta:e,onProgress:r}){const i={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},a={},o=t.slice(-20).toString("hex"),c=[],f={},d=new Map;let l=null,h=null;await async function(t,e){const r=new xt(t);let i=await r.read(4);if(i=i.toString("utf8"),"PACK"!==i)throw new u(`Invalid PACK header '${i}'`);let a=await r.read(4);if(a=a.readUInt32BE(0),2!==a)throw new u(`Invalid packfile version: ${a}`);let s=await r.read(4);if(s=s.readUInt32BE(0),!(s<1))for(;!r.eof()&&s--;){const t=r.tell(),{type:i,length:a,ofs:o,reference:c}=await vt(r),f=new n.Inflate;for(;!f.result;){const n=await r.chunk();if(!n)break;if(f.push(n,!1),f.err)throw new u(`Pako error: ${f.msg}`);if(f.result){if(f.result.length!==a)throw new u("Inflated object size is different from that stated in packfile.");await r.undo(),await r.read(n.length-f.strm.avail_in);const d=r.tell();await e({data:f.result,type:i,num:s,offset:t,end:d,reference:c,ofs:o})}}}}([t],(async({data:t,type:e,reference:s,offset:n,num:o})=>{null===l&&(l=o);const c=Math.floor(100*(l-o)/l);c!==h&&r&&await r({phase:"Receiving objects",loaded:l-o,total:l}),h=c,(["commit","tree","blob","tag"].includes(e=i[e])||"ofs-delta"===e||"ref-delta"===e)&&(a[n]={type:e,offset:n})}));const g=Object.keys(a).map(Number);for(const[n,u]of g.entries()){const e=n+1===g.length?t.byteLength-20:g[n+1],r=a[u],i=s.buf(t.slice(u,e))>>>0;r.end=e,r.crc=i}const w=new kt({pack:Promise.resolve(t),packfileSha:o,crcs:f,hashes:c,offsets:d,getExternalRefDelta:e});h=null;let p=0;const m=[0,0,0,0,0,0,0,0,0,0,0,0];for(let s in a){s=Number(s);const t=Math.floor(100*p++/l);t!==h&&r&&await r({phase:"Resolving deltas",loaded:p,total:l}),h=t;const e=a[s];if(!e.oid)try{w.readDepth=0,w.externalReadDepth=0;const{type:t,object:r}=await w.readSlice({start:s});m[w.readDepth]+=1;const i=await _(wt.wrap({type:t,object:r}));e.oid=i,c.push(i),d.set(i,s),f[i]=e.crc}catch(y){continue}}return c.sort(),w}async toBuffer(){const t=[],e=(e,r)=>{t.push(l.from(e,r))};e("ff744f63","hex"),e("00000002","hex");const r=new w(l.alloc(1024));for(let c=0;c<256;c++){let t=0;for(const e of this.hashes)parseInt(e.slice(0,2),16)<=c&&t++;r.writeUInt32BE(t)}t.push(r.buffer);for(const c of this.hashes)e(c,"hex");const i=new w(l.alloc(4*this.hashes.length));for(const c of this.hashes)i.writeUInt32BE(this.crcs[c]);t.push(i.buffer);const a=new w(l.alloc(4*this.hashes.length));for(const c of this.hashes)a.writeUInt32BE(this.offsets.get(c));t.push(a.buffer),e(this.packfileSha,"hex");const s=l.concat(t),n=await _(s),o=l.alloc(20);return o.write(n,"hex"),l.concat([s,o])}async load({pack:t}){this.pack=t}async unload(){this.pack=null}async read({oid:t}){if(!this.offsets.get(t)){if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(t);throw new u(`Could not read object ${t} from packfile`)}const e=this.offsets.get(t);return this.readSlice({start:e})}async readSlice({start:t}){if(this.offsetCache[t])return Object.assign({},this.offsetCache[t]);this.readDepth++;if(!this.pack)throw new u("Tried to read from a GitPackIndex with no packfile loaded into memory");const e=(await this.pack).slice(t),r=new w(e),i=r.readUInt8(),a=112&i;let s={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"}[a];if(void 0===s)throw new u("Unrecognized type: 0b"+a.toString(2));const n=15&i;let o=n;128&i&&(o=function(t,e){let r=e,i=4,a=null;do{a=t.readUInt8(),r|=(127&a)<<i,i+=7}while(128&a);return r}(r,n));let c=null,f=null;if("ofs_delta"===s){const e=function(t){const e=[];let r=0,i=0;do{r=t.readUInt8();const a=127&r;e.push(a),i=128&r}while(i);return e.reduce(((t,e)=>t+1<<7|e),-1)}(r),i=t-e;({object:c,type:s}=await this.readSlice({start:i}))}if("ref_delta"===s){const t=r.slice(20).toString("hex");({object:c,type:s}=await this.read({oid:t}))}const d=e.slice(r.tell());if(f=l.from(await Et(d)),f.byteLength!==o)throw new u(`Packfile told us object would have length ${o} but it had length ${f.byteLength}`);return c&&(f=l.from(function(t,e){const r=new w(t),i=pt(r);if(i!==e.byteLength)throw new u(`applyDelta expected source buffer to be ${i} bytes but the provided buffer was ${e.length} bytes`);const a=pt(r);let s;const n=yt(r,e);if(n.byteLength===a)s=n;else{s=l.alloc(a);const t=new w(s);for(t.copy(n);!r.eof();)t.copy(yt(r,e));const i=t.tell();if(a!==i)throw new u(`applyDelta expected target buffer to be ${a} bytes but the resulting buffer was ${i} bytes`)}return s}(f,c))),this.readDepth>3&&(this.offsetCache[t]={type:s,object:f}),{type:s,format:"content",object:f}}}const St=Symbol("PackfileCache");function jt({fs:t,cache:e,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:s}){e[St]||(e[St]=new Map);let n=e[St].get(r);return n||(n=async function({fs:t,filename:e,getExternalRefDelta:r,emitter:i,emitterPrefix:a}){const s=await t.read(e);return kt.fromIdx({idx:s,getExternalRefDelta:r})}({fs:t,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:s}),e[St].set(r,n)),n}async function Pt({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){const s=i=>Pt({fs:t,cache:e,gitdir:r,oid:i});let n;if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i&&(n={format:"wrapped",object:l.from("tree 0\0")}),n||(n=await async function({fs:t,gitdir:e,oid:r}){const i=`objects/${r.slice(0,2)}/${r.slice(2)}`,a=await t.read(`${e}/${i}`);return a?{object:a,format:"deflated",source:i}:null}({fs:t,gitdir:r,oid:i})),n||(n=await async function({fs:t,cache:e,gitdir:r,oid:i,format:a="content",getExternalRefDelta:s}){let n=await t.readdir(K(r,"objects/pack"));n=n.filter((t=>t.endsWith(".idx")));for(const o of n){const a=`${r}/objects/pack/${o}`,n=await jt({fs:t,cache:e,filename:a,getExternalRefDelta:s});if(n.error)throw new u(n.error);if(n.offsets.has(i)){if(!n.pack){const e=a.replace(/idx$/,"pack");n.pack=t.read(e)}const e=await n.read({oid:i,getExternalRefDelta:s});return e.format="content",e.source=`objects/pack/${o.replace(/idx$/,"pack")}`,e}}return null}({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:s})),!n)throw new U(i);if("deflated"===a)return n;if("deflated"===n.format&&(n.object=l.from(await Et(n.object)),n.format="wrapped"),"wrapped"===n.format){if("wrapped"===a&&"wrapped"===n.format)return n;const t=await _(n.object);if(t!==i)throw new u(`SHA check failed! Expected ${i}, computed ${t}`);const{object:e,type:r}=wt.unwrap(n.object);n.type=r,n.object=e,n.format="content"}if("content"===n.format)return"content"===a?n:void 0;throw new u(`invalid format "${n.format}"`)}class At extends h{constructor(t,e,r=!0){super(`Failed to create ${t} at ${e} because it already exists.${r?` (Hint: use 'force: true' parameter to overwrite existing ${t}.)`:""}`),this.code=this.name=At.code,this.data={noun:t,where:e,canForce:r}}}At.code="AlreadyExistsError";class Rt extends h{constructor(t,e,r){super(`Found multiple ${t} matching "${e}" (${r.join(", ")}). Use a longer abbreviation length to disambiguate them.`),this.code=this.name=Rt.code,this.data={nouns:t,short:e,matches:r}}}Rt.code="AmbiguousError";class It extends h{constructor(t){super(`Your local changes to the following files would be overwritten by checkout: ${t.join(", ")}`),this.code=this.name=It.code,this.data={filepaths:t}}}It.code="CheckoutConflictError";class Ot extends h{constructor(t,e){super(`Failed to checkout "${t}" because commit ${e} is not available locally. Do a git fetch to make the branch available locally.`),this.code=this.name=Ot.code,this.data={ref:t,oid:e}}}Ot.code="CommitNotFetchedError";class Bt extends h{constructor(){super("Empty response from git server."),this.code=this.name=Bt.code,this.data={}}}Bt.code="EmptyServerResponseError";class Nt extends h{constructor(){super("A simple fast-forward merge was not possible."),this.code=this.name=Nt.code,this.data={}}}Nt.code="FastForwardError";class Ct extends h{constructor(t,e){super(`One or more branches were not updated: ${t}`),this.code=this.name=Ct.code,this.data={prettyDetails:t,result:e}}}Ct.code="GitPushError";class Ut extends h{constructor(t,e,r){super(`HTTP Error: ${t} ${e}`),this.code=this.name=Ut.code,this.data={statusCode:t,statusMessage:e,response:r}}}Ut.code="HttpError";class Dt extends h{constructor(t){let e="invalid filepath";"leading-slash"===t||"trailing-slash"===t?e='"filepath" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.':"directory"===t&&(e='"filepath" should not be a directory.'),super(e),this.code=this.name=Dt.code,this.data={reason:t}}}Dt.code="InvalidFilepathError";class Mt extends h{constructor(t,e){super(`"${t}" would be an invalid git reference. (Hint: a valid alternative would be "${e}".)`),this.code=this.name=Mt.code,this.data={ref:t,suggestion:e}}}Mt.code="InvalidRefNameError";class Tt extends h{constructor(t){super(`Maximum search depth of ${t} exceeded.`),this.code=this.name=Tt.code,this.data={depth:t}}}Tt.code="MaxDepthError";class Ft extends h{constructor(){super("Merges with conflicts are not supported yet."),this.code=this.name=Ft.code,this.data={}}}Ft.code="MergeNotSupportedError";class Ht extends h{constructor(t){super(`No name was provided for ${t} in the argument or in the .git/config file.`),this.code=this.name=Ht.code,this.data={role:t}}}Ht.code="MissingNameError";class zt extends h{constructor(t){super(`The function requires a "${t}" parameter but none was provided.`),this.code=this.name=zt.code,this.data={parameter:t}}}zt.code="MissingParameterError";class Gt extends h{constructor(t){super('There are multiple errors that were thrown by the method. Please refer to the "errors" property to see more'),this.code=this.name=Gt.code,this.data={errors:t},this.errors=t}}Gt.code="MultipleGitError";class Wt extends h{constructor(t,e){super(`Expected "${t}" but received "${e}".`),this.code=this.name=Wt.code,this.data={expected:t,actual:e}}}Wt.code="ParseError";class Kt extends h{constructor(t){let e="";"not-fast-forward"===t?e=" because it was not a simple fast-forward":"tag-exists"===t&&(e=" because tag already exists"),super(`Push rejected${e}. Use "force: true" to override.`),this.code=this.name=Kt.code,this.data={reason:t}}}Kt.code="PushRejectedError";class qt extends h{constructor(t,e){super(`Remote does not support the "${t}" so the "${e}" parameter cannot be used.`),this.code=this.name=qt.code,this.data={capability:t,parameter:e}}}qt.code="RemoteCapabilityError";class Lt extends h{constructor(t,e){super(`Remote did not reply using the "smart" HTTP protocol. Expected "001e# service=git-upload-pack" but received: ${t}`),this.code=this.name=Lt.code,this.data={preview:t,response:e}}}Lt.code="SmartHttpError";class Vt extends h{constructor(t,e,r){super(`Git remote "${t}" uses an unrecognized transport protocol: "${e}"`),this.code=this.name=Vt.code,this.data={url:t,transport:e,suggestion:r}}}Vt.code="UnknownTransportError";class Zt extends h{constructor(t){super(`Cannot parse remote URL: "${t}"`),this.code=this.name=Zt.code,this.data={url:t}}}Zt.code="UrlParseError";class Yt extends h{constructor(){super("The operation was canceled."),this.code=this.name=Yt.code,this.data={}}}Yt.code="UserCanceledError";var Jt=Object.freeze({__proto__:null,AlreadyExistsError:At,AmbiguousError:Rt,CheckoutConflictError:It,CommitNotFetchedError:Ot,EmptyServerResponseError:Bt,FastForwardError:Nt,GitPushError:Ct,HttpError:Ut,InternalError:u,InvalidFilepathError:Dt,InvalidOidError:M,InvalidRefNameError:Mt,MaxDepthError:Tt,MergeNotSupportedError:Ft,MissingNameError:Ht,MissingParameterError:zt,MultipleGitError:Gt,NoRefspecError:T,NotFoundError:U,ObjectTypeError:D,ParseError:Wt,PushRejectedError:Kt,RemoteCapabilityError:qt,SmartHttpError:Lt,UnknownTransportError:Vt,UnsafeFilepathError:g,UrlParseError:Zt,UserCanceledError:Yt});function Xt({name:t,email:e,timestamp:r,timezoneOffset:i}){return`${t} <${e}> ${r} ${i=function(t){const e=function(t){return Math.sign(t)||(Object.is(t,-0)?-1:1)}((r=t,0===r?r:-r));var r;t=Math.abs(t);const i=Math.floor(t/60);t-=60*i;let a=String(i),s=String(t);a.length<2&&(a="0"+a);s.length<2&&(s="0"+s);return(-1===e?"-":"+")+a+s}(i)}`}function Qt(t){return t=(t=(t=t.replace(/\r/g,"")).replace(/^\n+/,"")).replace(/\n+$/,"")+"\n"}function te(t){const[,e,r,i,a]=t.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:e,email:r,timestamp:Number(i),timezoneOffset:ee(a)}}function ee(t){let[,e,r,i]=t.match(/(\+|-)(\d\d)(\d\d)/);return i=("+"===e?1:-1)*(60*Number(r)+Number(i)),0===(a=i)?a:-a;var a}class re{constructor(t){if("string"===typeof t)this._tag=t;else if(l.isBuffer(t))this._tag=t.toString("utf8");else{if("object"!==typeof t)throw new u("invalid type passed to GitAnnotatedTag constructor");this._tag=re.render(t)}}static from(t){return new re(t)}static render(t){return`object ${t.object}\ntype ${t.type}\ntag ${t.tag}\ntagger ${Xt(t.tagger)}\n\n${t.message}\n${t.gpgsig?t.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf("\n\n"))}message(){const t=this.withoutSignature();return t.slice(t.indexOf("\n\n")+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){const t=this.justHeaders().split("\n"),e=[];for(const i of t)" "===i[0]?e[e.length-1]+="\n"+i.slice(1):e.push(i);const r={};for(const i of e){const t=i.slice(0,i.indexOf(" ")),e=i.slice(i.indexOf(" ")+1);Array.isArray(r[t])?r[t].push(e):r[t]=e}return r.tagger&&(r.tagger=te(r.tagger)),r.committer&&(r.committer=te(r.committer)),r}withoutSignature(){const t=Qt(this._tag);return-1===t.indexOf("\n-----BEGIN PGP SIGNATURE-----")?t:t.slice(0,t.lastIndexOf("\n-----BEGIN PGP SIGNATURE-----"))}gpgsig(){if(-1===this._tag.indexOf("\n-----BEGIN PGP SIGNATURE-----"))return;return Qt(this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+"-----END PGP SIGNATURE-----".length))}payload(){return this.withoutSignature()+"\n"}toObject(){return l.from(this._tag,"utf8")}static async sign(t,e,r){const i=t.payload();let{signature:a}=await e({payload:i,secretKey:r});a=Qt(a);const s=i+a;return re.from(s)}}function ie(t){return t.trim().split("\n").map((t=>" "+t)).join("\n")+"\n"}class ae{constructor(t){if("string"===typeof t)this._commit=t;else if(l.isBuffer(t))this._commit=t.toString("utf8");else{if("object"!==typeof t)throw new u("invalid type passed to GitCommit constructor");this._commit=ae.render(t)}}static fromPayloadSignature({payload:t,signature:e}){const r=ae.justHeaders(t),i=ae.justMessage(t),a=Qt(r+"\ngpgsig"+ie(e)+"\n"+i);return new ae(a)}static from(t){return new ae(t)}toObject(){return l.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return ae.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(t){return Qt(t.slice(t.indexOf("\n\n")+2))}static justHeaders(t){return t.slice(0,t.indexOf("\n\n"))}parseHeaders(){const t=ae.justHeaders(this._commit).split("\n"),e=[];for(const i of t)" "===i[0]?e[e.length-1]+="\n"+i.slice(1):e.push(i);const r={parent:[]};for(const i of e){const t=i.slice(0,i.indexOf(" ")),e=i.slice(i.indexOf(" ")+1);Array.isArray(r[t])?r[t].push(e):r[t]=e}return r.author&&(r.author=te(r.author)),r.committer&&(r.committer=te(r.committer)),r}static renderHeaders(t){let e="";if(t.tree?e+=`tree ${t.tree}\n`:e+="tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\n",t.parent){if(void 0===t.parent.length)throw new u("commit 'parent' property should be an array");for(const r of t.parent)e+=`parent ${r}\n`}e+=`author ${Xt(t.author)}\n`;return e+=`committer ${Xt(t.committer||t.author)}\n`,t.gpgsig&&(e+="gpgsig"+ie(t.gpgsig)),e}static render(t){return ae.renderHeaders(t)+"\n"+Qt(t.message)}render(){return this._commit}withoutSignature(){const t=Qt(this._commit);if(-1===t.indexOf("\ngpgsig"))return t;return Qt(t.slice(0,t.indexOf("\ngpgsig"))+"\n"+t.slice(t.indexOf("-----END PGP SIGNATURE-----\n")+"-----END PGP SIGNATURE-----\n".length))}isolateSignature(){const t=this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+"-----END PGP SIGNATURE-----".length);return t.split("\n").map((t=>t.replace(/^ /,""))).join("\n")}static async sign(t,e,r){const i=t.withoutSignature(),a=ae.justMessage(t._commit);let{signature:s}=await e({payload:i,secretKey:r});s=Qt(s);const n=ae.justHeaders(t._commit)+"\ngpgsig"+ie(s)+"\n"+a;return ae.from(n)}}async function se({fs:t,cache:e,gitdir:r,oid:i}){if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i)return{tree:gt.from([]),oid:i};const{type:a,object:s}=await Pt({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return se({fs:t,cache:e,gitdir:r,oid:i=re.from(s).parse().object});if("commit"===a)return se({fs:t,cache:e,gitdir:r,oid:i=ae.from(s).parse().tree});if("tree"!==a)throw new D(i,a,"tree");return{tree:gt.from(s),oid:i}}class ne{constructor({fs:t,gitdir:e,ref:r,cache:i}){this.fs=t,this.cache=i,this.gitdir=e,this.mapPromise=(async()=>{const i=new Map;let a;try{a=await ft.resolve({fs:t,gitdir:e,ref:r})}catch(n){n instanceof U&&(a="4b825dc642cb6eb9a060e54bf8d69288fbee4904")}const s=await se({fs:t,cache:this.cache,gitdir:e,oid:a});return s.type="tree",s.mode="40000",i.set(".",s),i})();const a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){const e=t._fullpath,{fs:r,cache:i,gitdir:a}=this,s=await this.mapPromise,n=s.get(e);if(!n)throw new Error(`No obj for ${e}`);const o=n.oid;if(!o)throw new Error(`No oid for obj ${JSON.stringify(n)}`);if("tree"!==n.type)return null;const{type:c,object:f}=await Pt({fs:r,cache:i,gitdir:a,oid:o});if(c!==n.type)throw new D(o,c,n.type);const d=gt.from(f);for(const l of d)s.set(K(e,l.path),l);return d.entries().map((t=>K(e,t.path)))}async type(t){if(!1===t._type){const e=await this.mapPromise,{type:r}=e.get(t._fullpath);t._type=r}return t._type}async mode(t){if(!1===t._mode){const e=await this.mapPromise,{mode:r}=e.get(t._fullpath);t._mode=y(parseInt(r,8))}return t._mode}async stat(t){}async content(t){if(!1===t._content){const e=await this.mapPromise,{fs:r,cache:i,gitdir:a}=this,s=e.get(t._fullpath).oid,{type:n,object:o}=await Pt({fs:r,cache:i,gitdir:a,oid:s});t._content="blob"!==n?void 0:new Uint8Array(o)}return t._content}async oid(t){if(!1===t._oid){const e=(await this.mapPromise).get(t._fullpath);t._oid=e.oid}return t._oid}}function oe({ref:t="HEAD"}){const e=Object.create(null);return Object.defineProperty(e,N,{value:function({fs:e,gitdir:r,cache:i}){return new ne({fs:e,gitdir:r,ref:t,cache:i})}}),Object.freeze(e),e}class ce{constructor({fs:t,dir:e,gitdir:r,cache:i}){this.fs=t,this.cache=i,this.dir=e,this.gitdir=r;const a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){const e=t._fullpath,{fs:r,dir:i}=this,a=await r.readdir(K(i,e));return null===a?null:a.map((t=>K(e,t)))}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){const{fs:e,dir:r}=this;let i=await e.lstat(`${r}/${t._fullpath}`);if(!i)throw new Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let a=i.isDirectory()?"tree":"blob";"blob"!==a||i.isFile()||i.isSymbolicLink()||(a="special"),t._type=a,i=$(i),t._mode=i.mode,-1===i.size&&t._actualSize&&(i.size=t._actualSize),t._stat=i}return t._stat}async content(t){if(!1===t._content){const{fs:e,dir:r}=this;if("tree"===await t.type())t._content=void 0;else{const i=await e.read(`${r}/${t._fullpath}`);t._actualSize=i.length,t._stat&&-1===t._stat.size&&(t._stat.size=t._actualSize),t._content=new Uint8Array(i)}}return t._content}async oid(t){if(!1===t._oid){const{fs:e,gitdir:r,cache:i}=this;let a;await A.acquire({fs:e,gitdir:r,cache:i},(async function(e){const r=e.entriesMap.get(t._fullpath),i=await t.stat();if(!r||S(i,r)){void 0===await t.content()?a=void 0:(a=await _(wt.wrap({type:"blob",object:await t.content()})),r&&a===r.oid&&i.mode===r.mode&&S(i,r)&&e.insert({filepath:t._fullpath,stats:i,oid:a}))}else a=r.oid})),t._oid=a}return t._oid}}function fe(){const t=Object.create(null);return Object.defineProperty(t,N,{value:function({fs:t,dir:e,gitdir:r,cache:i}){return new ce({fs:t,dir:e,gitdir:r,cache:i})}}),Object.freeze(t),t}class de{static async isIgnored({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i}){if(".git"===R(i))return!0;if("."===i)return!1;let a="";const s=K(r,"info","exclude");await t.exists(s)&&(a=await t.read(s,"utf8"));const n=[{gitignore:K(e,".gitignore"),filepath:i}],c=i.split("/").filter(Boolean);for(let o=1;o<c.length;o++){const t=c.slice(0,o).join("/"),r=c.slice(o).join("/");n.push({gitignore:K(e,t,".gitignore"),filepath:r})}let f=!1;for(const l of n){let e;try{e=await t.read(l.gitignore,"utf8")}catch(d){if("NOENT"===d.code)continue}const r=o().add(a);r.add(e);const i=I(l.filepath);if("."!==i&&r.ignores(i))return!0;f=f?!r.test(l.filepath).unignored:r.test(l.filepath).ignored}return f}}async function le(t,e){const r=await t.readdir(e);null==r?await t.rm(e):r.length?await Promise.all(r.map((r=>{const i=K(e,r);return t.lstat(i).then((e=>{if(e)return e.isDirectory()?le(t,i):t.rm(i)}))}))).then((()=>t.rmdir(e))):await t.rmdir(e)}class he{constructor(t){if("undefined"!==typeof t._original_unwrapped_fs)return t;const e=Object.getOwnPropertyDescriptor(t,"promises");e&&e.enumerable?(this._readFile=t.promises.readFile.bind(t.promises),this._writeFile=t.promises.writeFile.bind(t.promises),this._mkdir=t.promises.mkdir.bind(t.promises),t.promises.rm?this._rm=t.promises.rm.bind(t.promises):t.promises.rmdir.length>1?this._rm=t.promises.rmdir.bind(t.promises):this._rm=le.bind(null,this),this._rmdir=t.promises.rmdir.bind(t.promises),this._unlink=t.promises.unlink.bind(t.promises),this._stat=t.promises.stat.bind(t.promises),this._lstat=t.promises.lstat.bind(t.promises),this._readdir=t.promises.readdir.bind(t.promises),this._readlink=t.promises.readlink.bind(t.promises),this._symlink=t.promises.symlink.bind(t.promises)):(this._readFile=c(t.readFile.bind(t)),this._writeFile=c(t.writeFile.bind(t)),this._mkdir=c(t.mkdir.bind(t)),t.rm?this._rm=c(t.rm.bind(t)):t.rmdir.length>2?this._rm=c(t.rmdir.bind(t)):this._rm=le.bind(null,this),this._rmdir=c(t.rmdir.bind(t)),this._unlink=c(t.unlink.bind(t)),this._stat=c(t.stat.bind(t)),this._lstat=c(t.lstat.bind(t)),this._readdir=c(t.readdir.bind(t)),this._readlink=c(t.readlink.bind(t)),this._symlink=c(t.symlink.bind(t))),this._original_unwrapped_fs=t}async exists(t,e={}){try{return await this._stat(t),!0}catch(r){if("ENOENT"===r.code||"ENOTDIR"===r.code)return!1;throw console.log('Unhandled error in "FileSystem.exists()" function',r),r}}async read(t,e={}){try{let r=await this._readFile(t,e);return"string"!==typeof r&&(r=l.from(r)),r}catch(r){return null}}async write(t,e,r={}){try{return void(await this._writeFile(t,e,r))}catch(i){await this.mkdir(I(t)),await this._writeFile(t,e,r)}}async mkdir(t,e=!1){try{return void(await this._mkdir(t))}catch(r){if(null===r)return;if("EEXIST"===r.code)return;if(e)throw r;if("ENOENT"===r.code){const e=I(t);if("."===e||"/"===e||e===t)throw r;await this.mkdir(e),await this.mkdir(t,!0)}}}async rm(t){try{await this._unlink(t)}catch(e){if("ENOENT"!==e.code)throw e}}async rmdir(t,e){try{e&&e.recursive?await this._rm(t,e):await this._rmdir(t)}catch(r){if("ENOENT"!==r.code)throw r}}async readdir(t){try{const e=await this._readdir(t);return e.sort(p),e}catch(e){return"ENOTDIR"===e.code?null:[]}}async readdirDeep(t){const e=await this._readdir(t);return(await Promise.all(e.map((async e=>{const r=t+"/"+e;return(await this._stat(r)).isDirectory()?this.readdirDeep(r):r})))).reduce(((t,e)=>t.concat(e)),[])}async lstat(t){try{return await this._lstat(t)}catch(e){if("ENOENT"===e.code)return null;throw e}}async readlink(t,e={encoding:"buffer"}){try{const r=await this._readlink(t,e);return l.isBuffer(r)?r:l.from(r)}catch(r){if("ENOENT"===r.code)return null;throw r}}async writelink(t,e){return this._symlink(e.toString("utf8"),t)}}let ue=null;async function ge(t){return null===ue&&(ue=function(){try{const t=new CompressionStream("deflate");if(new Blob([]).stream(),t)return!0}catch(t){}return!1}()),ue?async function(t){const e=new CompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}(t):n.deflate(t)}async function we({fs:t,gitdir:e,type:r,object:i,format:a="content",oid:s,dryRun:n=!1}){return"deflated"!==a&&("wrapped"!==a&&(i=wt.wrap({type:r,object:i})),s=await _(i),i=l.from(await ge(i))),n||await async function({fs:t,gitdir:e,object:r,format:i,oid:a}){if("deflated"!==i)throw new u("GitObjectStoreLoose expects objects to write to be in deflated format");const s=`${e}/objects/${a.slice(0,2)}/${a.slice(2)}`;await t.exists(s)||await t.write(s,r)}({fs:t,gitdir:e,object:i,format:"deflated",oid:s}),s}function pe(t,e){if(void 0===e)throw new zt(t)}async function me({dir:t,gitdir:e,fs:r,filepath:i,index:a,force:s}){const n=(i=Array.isArray(i)?i:[i]).map((async i=>{if(!s){if(await de.isIgnored({fs:r,dir:t,gitdir:e,filepath:i}))return}const n=await r.lstat(K(t,i));if(!n)throw new U(i);if(n.isDirectory()){const n=(await r.readdir(K(t,i))).map((n=>me({dir:t,gitdir:e,fs:r,filepath:[K(i,n)],index:a,force:s})));await Promise.all(n)}else{const s=n.isSymbolicLink()?await r.readlink(K(t,i)):await r.read(K(t,i));if(null===s)throw new U(i);const o=await we({fs:r,gitdir:e,type:"blob",object:s});a.insert({filepath:i,stats:n,oid:o})}})),o=await Promise.allSettled(n),c=o.filter((t=>"rejected"===t.status)).map((t=>t.reason));if(c.length>1)throw new Gt(c);if(1===c.length)throw c[0];return o.filter((t=>"fulfilled"===t.status&&t.value)).map((t=>t.value))}async function ye({fs:t,cache:e,onSign:r,gitdir:i,message:a,author:s,committer:n,signingKey:o,dryRun:c=!1,noUpdateBranch:f=!1,ref:d,parent:l,tree:h}){return d||(d=await ft.resolve({fs:t,gitdir:i,ref:"HEAD",depth:2})),A.acquire({fs:t,gitdir:i,cache:e},(async function(e){const u=O(e.entries).get(".");if(h||(h=await be({fs:t,gitdir:i,inode:u,dryRun:c})),!l)try{l=[await ft.resolve({fs:t,gitdir:i,ref:d})]}catch(p){l=[]}let g=ae.from({tree:h,parent:l,author:s,committer:n,message:a});o&&(g=await ae.sign(g,r,o));const w=await we({fs:t,gitdir:i,type:"commit",object:g.toObject(),dryRun:c});return f||c||await ft.writeRef({fs:t,gitdir:i,ref:d,value:w}),w}))}async function be({fs:t,gitdir:e,inode:r,dryRun:i}){const a=r.children;for(const o of a)"tree"===o.type&&(o.metadata.mode="040000",o.metadata.oid=await be({fs:t,gitdir:e,inode:o,dryRun:i}));const s=a.map((t=>({mode:t.metadata.mode,path:t.basename,oid:t.metadata.oid,type:t.type}))),n=gt.from(s);return await we({fs:t,gitdir:e,type:"tree",object:n.toObject(),dryRun:i})}async function xe({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){if(a.startsWith("/"))throw new Dt("leading-slash");if(a.endsWith("/"))throw new Dt("trailing-slash");const s=i,n=await se({fs:t,cache:e,gitdir:r,oid:i}),o=n.tree;if(""===a)i=n.oid;else{const n=a.split("/");i=await $e({fs:t,cache:e,gitdir:r,tree:o,pathArray:n,oid:s,filepath:a})}return i}async function $e({fs:t,cache:e,gitdir:r,tree:i,pathArray:a,oid:s,filepath:n}){const o=a.shift();for(const c of i)if(c.path===o){if(0===a.length)return c.oid;{const{type:o,object:f}=await Pt({fs:t,cache:e,gitdir:r,oid:c.oid});if("tree"!==o)throw new D(s,o,"blob",n);return $e({fs:t,cache:e,gitdir:r,tree:i=gt.from(f),pathArray:a,oid:s,filepath:n})}}throw new U(`file or directory found at "${s}:${n}"`)}async function ve({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){void 0!==a&&(i=await xe({fs:t,cache:e,gitdir:r,oid:i,filepath:a}));const{tree:s,oid:n}=await se({fs:t,cache:e,gitdir:r,oid:i});return{oid:n,tree:s.entries()}}async function _e({fs:t,gitdir:e,tree:r}){const i=gt.from(r).toObject();return await we({fs:t,gitdir:e,type:"tree",object:i,format:"content"})}async function Ee({fs:t,gitdir:e,path:r}){return(await nt.get({fs:t,gitdir:e})).get(r)}async function ke({fs:t,gitdir:e,author:r={}}){let{name:i,email:a,timestamp:s,timezoneOffset:n}=r;if(i=i||await Ee({fs:t,gitdir:e,path:"user.name"}),a=a||await Ee({fs:t,gitdir:e,path:"user.email"})||"",void 0!==i)return s=null!=s?s:Math.floor(Date.now()/1e3),n=null!=n?n:new Date(1e3*s).getTimezoneOffset(),{name:i,email:a,timestamp:s,timezoneOffset:n}}async function Se({fs:t,gitdir:e,author:r,committer:i}){return i=Object.assign({},i||r),r&&(i.timestamp=i.timestamp||r.timestamp,i.timezoneOffset=i.timezoneOffset||r.timezoneOffset),i=await ke({fs:t,gitdir:e,author:i})}async function je({fs:t,gitdir:e,remote:r,url:i,force:a}){if(r!==f.clean(r))throw new Mt(r,f.clean(r));const s=await nt.get({fs:t,gitdir:e});if(!a){if((await s.getSubsections("remote")).includes(r)&&i!==await s.get(`remote.${r}.url`))throw new At("remote",r)}await s.set(`remote.${r}.url`,i),await s.set(`remote.${r}.fetch`,`+refs/heads/*:refs/remotes/${r}/*`),await nt.save({fs:t,gitdir:e,config:s})}const Pe="undefined"===typeof Array.prototype.flat?t=>t.reduce(((t,e)=>t.concat(e)),[]):t=>t.flat();class Ae{constructor(){this.value=null}consider(t){null!==t&&void 0!==t&&(null===this.value||t<this.value)&&(this.value=t)}reset(){this.value=null}}function*Re(t){const e=new Ae;let r;const i=[],a=t.length;for(let s=0;s<a;s++)i[s]=t[s].next().value,void 0!==i[s]&&e.consider(i[s]);if(null!==e.value)for(;;){const s=[];r=e.value,e.reset();for(let n=0;n<a;n++)void 0!==i[n]&&i[n]===r?(s[n]=i[n],i[n]=t[n].next().value):s[n]=null,void 0!==i[n]&&e.consider(i[n]);if(yield s,null===e.value)return}}async function Ie({fs:t,cache:e,dir:r,gitdir:i,trees:a,map:s=(async(t,e)=>e),reduce:n=(async(t,e)=>{const r=Pe(e);return void 0!==t&&r.unshift(t),r}),iterate:o=((t,e)=>Promise.all([...e].map(t)))}){const c=a.map((a=>a[N]({fs:t,dir:r,gitdir:i,cache:e}))),f=new Array(c.length).fill("."),d=function(t,e){const r=e-t;return Array.from({length:r},((e,r)=>t+r))}(0,c.length),l=async t=>{const{entries:e,children:r}=await(async t=>{d.map((e=>{t[e]=t[e]&&new c[e].ConstructEntry(t[e])}));const e=(await Promise.all(d.map((e=>t[e]?c[e].readdir(t[e]):[])))).map((t=>null===t?[]:t)).map((t=>t[Symbol.iterator]()));return{entries:t,children:Re(e)}})(t),i=e.find((t=>t&&t._fullpath))._fullpath,a=await s(i,e);if(null!==a){let t=await o(l,r);return t=t.filter((t=>void 0!==t)),n(a,t)}};return l(f)}const Oe=(t,e)=>"."===t||null==e||0===e.length||"."===e||(e.length>=t.length?e.startsWith(t):t.startsWith(e));async function Be({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,remote:s,ref:n,filepaths:o,noCheckout:c,noUpdateHead:f,dryRun:d,force:l,track:h=!0}){let g;try{g=await ft.resolve({fs:t,gitdir:a,ref:n})}catch(w){if("HEAD"===n)throw w;const e=`${s}/${n}`;if(g=await ft.resolve({fs:t,gitdir:a,ref:e}),h){const e=await nt.get({fs:t,gitdir:a});await e.set(`branch.${n}.remote`,s),await e.set(`branch.${n}.merge`,`refs/heads/${n}`),await nt.save({fs:t,gitdir:a,config:e})}await ft.writeRef({fs:t,gitdir:a,ref:`refs/heads/${n}`,value:g})}if(!c){let s;try{s=await async function({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:s,force:n,filepaths:o}){let c=0;return Ie({fs:t,cache:e,dir:i,gitdir:a,trees:[oe({ref:s}),fe(),C()],map:async function(t,[e,i,a]){if("."===t)return;if(o&&!o.some((e=>Oe(t,e))))return null;r&&await r({phase:"Analyzing workdir",loaded:++c});switch([!!a,!!e,!!i].map(Number).join("")){case"000":return;case"001":return n&&o&&o.includes(t)?["delete",t]:void 0;case"010":switch(await e.type()){case"tree":return["mkdir",t];case"blob":return["create",t,await e.oid(),await e.mode()];case"commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`new entry Unhandled type ${await e.type()}`]}case"011":switch(`${await e.type()}-${await i.type()}`){case"tree-tree":case"commit-tree":return;case"tree-blob":case"blob-tree":case"commit-blob":return["conflict",t];case"blob-blob":return await e.oid()!==await i.oid()?n?["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()]:["conflict",t]:await e.mode()!==await i.mode()?n?["update",t,await e.oid(),await e.mode(),!0]:["conflict",t]:["create-index",t,await e.oid(),await e.mode()];default:return["error",`new entry Unhandled type ${e.type}`]}case"100":return["delete-index",t];case"101":switch(await a.type()){case"tree":return["rmdir",t];case"blob":return await a.oid()!==await i.oid()?n?["delete",t]:["conflict",t]:["delete",t];case"commit":return["rmdir-index",t];default:return["error",`delete entry Unhandled type ${await a.type()}`]}case"110":case"111":switch(`${await a.type()}-${await e.type()}`){case"tree-tree":return;case"blob-blob":if(await a.oid()===await e.oid()&&await a.mode()===await e.mode()&&!n)return;if(i){if(await i.oid()!==await a.oid()&&await i.oid()!==await e.oid())return n?["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()]:["conflict",t]}else if(n)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await a.mode()];return await e.mode()!==await a.mode()?["update",t,await e.oid(),await e.mode(),!0]:await e.oid()!==await a.oid()?["update",t,await e.oid(),await e.mode(),!1]:void 0;case"tree-blob":return["update-dir-to-blob",t,await e.oid()];case"blob-tree":return["update-blob-to-tree",t];case"commit-commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`update entry Unhandled type ${await a.type()}-${await e.type()}`]}}},reduce:async function(t,e){return e=Pe(e),t?t&&"rmdir"===t[0]?(e.push(t),e):(e.unshift(t),e):e}})}({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:n,force:l,filepaths:o})}catch(w){throw w instanceof U&&w.data.what===g?new Ot(n,g):w}const c=s.filter((([t])=>"conflict"===t)).map((([t,e])=>e));if(c.length>0)throw new It(c);const f=s.filter((([t])=>"error"===t)).map((([t,e])=>e));if(f.length>0)throw new u(f.join(", "));if(d)return;let h=0;const p=s.length;await A.acquire({fs:t,gitdir:a,cache:e},(async function(e){await Promise.all(s.filter((([t])=>"delete"===t||"delete-index"===t)).map((async function([a,s]){const n=`${i}/${s}`;"delete"===a&&await t.rm(n),e.delete({filepath:s}),r&&await r({phase:"Updating workdir",loaded:++h,total:p})})))})),await A.acquire({fs:t,gitdir:a,cache:e},(async function(e){for(const[n,o]of s)if("rmdir"===n||"rmdir-index"===n){const s=`${i}/${o}`;try{"rmdir-index"===n&&e.delete({filepath:o}),await t.rmdir(s),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}catch(a){if("ENOTEMPTY"!==a.code)throw a;console.log(`Did not delete ${o} because directory is not empty`)}}})),await Promise.all(s.filter((([t])=>"mkdir"===t||"mkdir-index"===t)).map((async function([e,a]){const s=`${i}/${a}`;await t.mkdir(s),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}))),await A.acquire({fs:t,gitdir:a,cache:e},(async function(n){await Promise.all(s.filter((([t])=>"create"===t||"create-index"===t||"update"===t||"mkdir-index"===t)).map((async function([s,o,c,f,d]){const l=`${i}/${o}`;try{if("create-index"!==s&&"mkdir-index"!==s){const{object:r}=await Pt({fs:t,cache:e,gitdir:a,oid:c});if(d&&await t.rm(l),33188===f)await t.write(l,r);else if(33261===f)await t.write(l,r,{mode:511});else{if(40960!==f)throw new u(`Invalid mode 0o${f.toString(8)} detected in blob ${c}`);await t.writelink(l,r)}}const i=await t.lstat(l);33261===f&&(i.mode=493),"mkdir-index"===s&&(i.mode=57344),n.insert({filepath:o,stats:i,oid:c}),r&&await r({phase:"Updating workdir",loaded:++h,total:p})}catch(g){console.log(g)}})))}))}if(!f){const e=await ft.expand({fs:t,gitdir:a,ref:n});e.startsWith("refs/heads")?await ft.writeSymbolicRef({fs:t,gitdir:a,ref:"HEAD",value:e}):await ft.writeRef({fs:t,gitdir:a,ref:"HEAD",value:g})}}const Ne=new RegExp("^refs/(heads/|tags/|remotes/)?(.*)");function Ce(t){const e=Ne.exec(t);return e?"remotes/"===e[1]&&t.endsWith("/HEAD")?e[2].slice(0,-5):e[2]:t}async function Ue({fs:t,gitdir:e,fullname:r=!1,test:i=!1}){const a=await ft.resolve({fs:t,gitdir:e,ref:"HEAD",depth:2});if(i)try{await ft.resolve({fs:t,gitdir:e,ref:a})}catch(s){return}if(a.startsWith("refs/"))return r?a:Ce(a)}function De({username:t="",password:e=""}){return`Basic ${l.from(`${t}:${e}`).toString("base64")}`}async function Me(t,e){const r=bt(t);for(;;){const{value:t,done:i}=await r.next();if(t&&await e(t),i)break}r.return&&r.return()}async function Te(t){let e=0;const r=[];await Me(t,(t=>{r.push(t),e+=t.byteLength}));const i=new Uint8Array(e);let a=0;for(const s of r)i.set(s,a),a+=s.byteLength;return i}function Fe(t){let e=t.match(/^https?:\/\/([^/]+)@/);if(null==e)return{url:t,auth:{}};e=e[1];const[r,i]=e.split(":");return{url:t=t.replace(`${e}@`,""),auth:{username:r,password:i}}}function He(t,e){const r=e.toString(16);return"0".repeat(t-r.length)+r}class ze{static flush(){return l.from("0000","utf8")}static delim(){return l.from("0001","utf8")}static encode(t){"string"===typeof t&&(t=l.from(t));const e=He(4,t.length+4);return l.concat([l.from(e,"utf8"),t])}static streamReader(t){const e=new xt(t);return async function(){try{let t=await e.read(4);if(null==t)return!0;if(t=parseInt(t.toString("utf8"),16),0===t)return null;if(1===t)return null;const r=await e.read(t-4);return null==r||r}catch(t){return console.log("error",t),!0}}}}async function Ge(t){const e={};let r;for(;r=await t(),!0!==r;){if(null===r)continue;r=r.toString("utf8").replace(/\n$/,"");const t=r.indexOf("=");if(t>-1){const i=r.slice(0,t),a=r.slice(t+1);e[i]=a}else e[r]=!0}return{protocolVersion:2,capabilities2:e}}async function We(t,{service:e}){const r=new Set,i=new Map,a=new Map,s=ze.streamReader(t);let n=await s();for(;null===n;)n=await s();if(!0===n)throw new Bt;if(n.includes("version 2"))return Ge(s);if(n.toString("utf8").replace(/\n$/,"")!==`# service=${e}`)throw new Wt(`# service=${e}\\n`,n.toString("utf8"));let o=await s();for(;null===o;)o=await s();if(!0===o)return{capabilities:r,refs:i,symrefs:a};if(o=o.toString("utf8"),o.includes("version 2"))return Ge(s);const[c,f]=Ke(o,"\0","\\x00");f.split(" ").map((t=>r.add(t)));const[d,l]=Ke(c," "," ");for(i.set(l,d);;){const t=await s();if(!0===t)break;if(null!==t){const[e,r]=Ke(t.toString("utf8")," "," ");i.set(r,e)}}for(const h of r)if(h.startsWith("symref=")){const t=h.match(/symref=([^:]+):(.*)/);3===t.length&&a.set(t[1],t[2])}return{protocolVersion:1,capabilities:r,refs:i,symrefs:a}}function Ke(t,e,r){const i=t.trim().split(e);if(2!==i.length)throw new Wt(`Two strings separated by '${r}'`,t.toString("utf8"));return i}const qe=(t,e)=>t.endsWith("?")?`${t}${e}`:`${t}/${e.replace(/^https?:\/\//,"")}`,Le=(t,e)=>{(e.username||e.password)&&(t.Authorization=De(e)),e.headers&&Object.assign(t,e.headers)},Ve=async t=>{try{const e=l.from(await Te(t.body)),r=e.toString("utf8");return{preview:r.length<256?r:r.slice(0,256)+"...",response:r,data:e}}catch(e){return{}}};class Ze{static async capabilities(){return["discover","connect"]}static async discover({http:t,onProgress:e,onAuth:r,onAuthSuccess:i,onAuthFailure:a,corsProxy:s,service:n,url:o,headers:c,protocolVersion:f}){let{url:d,auth:l}=Fe(o);const h=s?qe(s,d):d;let u,g;(l.username||l.password)&&(c.Authorization=De(l)),2===f&&(c["Git-Protocol"]="version=2");let w=!1;do{if(u=await t.request({onProgress:e,method:"GET",url:`${h}/info/refs?service=${n}`,headers:c}),g=!1,401===u.statusCode||203===u.statusCode){const t=w?a:r;if(t){if(l=await t(d,{...l,headers:{...c}}),l&&l.cancel)throw new Yt;l&&(Le(c,l),w=!0,g=!0)}}else 200===u.statusCode&&w&&i&&await i(d,l)}while(g);if(200!==u.statusCode){const{response:t}=await Ve(u);throw new Ut(u.statusCode,u.statusMessage,t)}if(u.headers["content-type"]===`application/x-${n}-advertisement`){const t=await We(u.body,{service:n});return t.auth=l,t}{const{preview:t,response:e,data:r}=await Ve(u);try{const t=await We([r],{service:n});return t.auth=l,t}catch(p){throw new Lt(t,e)}}}static async connect({http:t,onProgress:e,corsProxy:r,service:i,url:a,auth:s,body:n,headers:o}){const c=Fe(a);c&&(a=c.url),r&&(a=qe(r,a)),o["content-type"]=`application/x-${i}-request`,o.accept=`application/x-${i}-result`,Le(o,s);const f=await t.request({onProgress:e,method:"POST",url:`${a}/${i}`,body:n,headers:o});if(200!==f.statusCode){const{response:t}=Ve(f);throw new Ut(f.statusCode,f.statusMessage,t)}return f}}class Ye{static getRemoteHelperFor({url:t}){const e=new Map;e.set("http",Ze),e.set("https",Ze);const r=function({url:t}){if(t.startsWith("git@"))return{transport:"ssh",address:t};const e=t.match(/(\w+)(:\/\/|::)(.*)/);return null!==e?"://"===e[2]?{transport:e[1],address:e[0]}:"::"===e[2]?{transport:e[1],address:e[3]}:void 0:void 0}({url:t});if(!r)throw new Zt(t);if(e.has(r.transport))return e.get(r.transport);throw new Vt(t,r.transport,"ssh"===r.transport?function(t){return(t=t.replace(/^git@([^:]+):/,"https://$1/")).replace(/^ssh:\/\//,"https://")}(t):void 0)}}let Je=null;class Xe{static async read({fs:t,gitdir:e}){null===Je&&(Je=new i);const r=K(e,"shallow"),a=new Set;return await Je.acquire(r,(async function(){const e=await t.read(r,{encoding:"utf8"});return null===e||""===e.trim()?a:void e.trim().split("\n").map((t=>a.add(t)))})),a}static async write({fs:t,gitdir:e,oids:r}){null===Je&&(Je=new i);const a=K(e,"shallow");if(r.size>0){const e=[...r].join("\n")+"\n";await Je.acquire(a,(async function(){await t.write(a,e,{encoding:"utf8"})}))}else await Je.acquire(a,(async function(){await t.rm(a)}))}}async function Qe({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){const s=i=>Pt({fs:t,cache:e,gitdir:r,oid:i});let n=await async function({fs:t,gitdir:e,oid:r}){const i=`objects/${r.slice(0,2)}/${r.slice(2)}`;return t.exists(`${e}/${i}`)}({fs:t,gitdir:r,oid:i});return n||(n=await async function({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let s=await t.readdir(K(r,"objects/pack"));s=s.filter((t=>t.endsWith(".idx")));for(const n of s){const s=`${r}/objects/pack/${n}`,o=await jt({fs:t,cache:e,filename:s,getExternalRefDelta:a});if(o.error)throw new u(o.error);if(o.offsets.has(i))return!0}return!1}({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:s})),n}function tr(t,e){const r=t.map((t=>t.split("=",1)[0]));return e.filter((t=>{const e=t.split("=",1)[0];return r.includes(e)}))}const er="1.17.3",rr="git/isomorphic-git@1.17.3";class ir{constructor(){this._queue=[]}write(t){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){const e=this._waiting;this._waiting=null,e({value:t})}else this._queue.push(t)}end(){if(this._ended=!0,this._waiting){const t=this._waiting;this._waiting=null,t({done:!0})}}destroy(t){this._ended=!0,this.error=t}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise((t=>{this._waiting=t}))}}function ar(t){const e=t.indexOf("\r"),r=t.indexOf("\n");return-1===e&&-1===r?-1:-1===e?r+1:-1===r?e+1:r===e+1?r+1:Math.min(e,r)+1}function sr(t){const e=new ir;let r="";return(async()=>{await Me(t,(t=>{for(t=t.toString("utf8"),r+=t;;){const t=ar(r);if(-1===t)break;e.write(r.slice(0,t)),r=r.slice(t)}})),r.length>0&&e.write(r),e.end()})(),e}class nr{static demux(t){const e=ze.streamReader(t),r=new ir,i=new ir,a=new ir,s=async function(){const t=await e();if(null===t)return s();if(!0===t)return r.end(),a.end(),void i.end();switch(t[0]){case 1:i.write(t.slice(1));break;case 2:a.write(t.slice(1));break;case 3:{const e=t.slice(1);return a.write(e),void i.destroy(new Error(e.toString("utf8")))}default:r.write(t.slice(0))}s()};return s(),{packetlines:r,packfile:i,progress:a}}}async function or({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,gitdir:c,ref:f,remoteRef:d,remote:h,url:u,corsProxy:g,depth:w=null,since:p=null,exclude:m=[],relative:y=!1,tags:b=!1,singleBranch:x=!1,headers:$={},prune:v=!1,pruneTags:_=!1}){const E=f||await Ue({fs:t,gitdir:c,test:!0}),k=await nt.get({fs:t,gitdir:c}),S=h||E&&await k.get(`branch.${E}.remote`)||"origin",j=u||await k.get(`remote.${S}.url`);if("undefined"===typeof j)throw new zt("remote OR url");const P=d||E&&await k.get(`branch.${E}.merge`)||f||"HEAD";void 0===g&&(g=await k.get("http.corsProxy"));const A=Ye.getRemoteHelperFor({url:j}),R=await A.discover({http:r,onAuth:s,onAuthSuccess:n,onAuthFailure:o,corsProxy:g,service:"git-upload-pack",url:j,headers:$,protocolVersion:1}),I=R.auth,O=R.refs;if(0===O.size)return{defaultBranch:null,fetchHead:null,fetchHeadDescription:null};if(null!==w&&!R.capabilities.has("shallow"))throw new qt("shallow","depth");if(null!==p&&!R.capabilities.has("deepen-since"))throw new qt("deepen-since","since");if(m.length>0&&!R.capabilities.has("deepen-not"))throw new qt("deepen-not","exclude");if(!0===y&&!R.capabilities.has("deepen-relative"))throw new qt("deepen-relative","relative");const{oid:B,fullref:N}=ft.resolveAgainstMap({ref:P,map:O});for(const l of O.keys())l===N||"HEAD"===l||l.startsWith("refs/heads/")||b&&l.startsWith("refs/tags/")||O.delete(l);const C=tr([...R.capabilities],["multi_ack_detailed","no-done","side-band-64k","ofs-delta",`agent=${rr}`]);y&&C.push("deepen-relative");const U=x?[B]:O.values(),D=x?[E]:await ft.listRefs({fs:t,gitdir:c,filepath:"refs"});let T=[];for(let l of D)try{l=await ft.expand({fs:t,gitdir:c,ref:l});const r=await ft.resolve({fs:t,gitdir:c,ref:l});await Qe({fs:t,cache:e,gitdir:c,oid:r})&&T.push(r)}catch(Y){}T=[...new Set(T)];const F=await Xe.read({fs:t,gitdir:c}),H=function({capabilities:t=[],wants:e=[],haves:r=[],shallows:i=[],depth:a=null,since:s=null,exclude:n=[]}){const o=[];e=[...new Set(e)];let c=` ${t.join(" ")}`;for(const f of e)o.push(ze.encode(`want ${f}${c}\n`)),c="";for(const f of i)o.push(ze.encode(`shallow ${f}\n`));null!==a&&o.push(ze.encode(`deepen ${a}\n`)),null!==s&&o.push(ze.encode(`deepen-since ${Math.floor(s.valueOf()/1e3)}\n`));for(const f of n)o.push(ze.encode(`deepen-not ${f}\n`));o.push(ze.flush());for(const f of r)o.push(ze.encode(`have ${f}\n`));return o.push(ze.encode("done\n")),o}({capabilities:C,wants:U,haves:T,shallows:R.capabilities.has("shallow")?[...F]:[],depth:w,since:p,exclude:m}),z=l.from(await Te(H)),G=await A.connect({http:r,onProgress:i,corsProxy:g,service:"git-upload-pack",url:j,auth:I,body:[z],headers:$}),W=await async function(t){const{packetlines:e,packfile:r,progress:i}=nr.demux(t),a=[],s=[],n=[];let o=!1,c=!1;return new Promise(((t,f)=>{Me(e,(e=>{const d=e.toString("utf8").trim();if(d.startsWith("shallow")){const t=d.slice(-41).trim();40!==t.length&&f(new M(t)),a.push(t)}else if(d.startsWith("unshallow")){const t=d.slice(-41).trim();40!==t.length&&f(new M(t)),s.push(t)}else if(d.startsWith("ACK")){const[,t,e]=d.split(" ");n.push({oid:t,status:e}),e||(c=!0)}else d.startsWith("NAK")&&(o=!0,c=!0);c&&t({shallows:a,unshallows:s,acks:n,nak:o,packfile:r,progress:i})}))}))}(G.body);G.headers&&(W.headers=G.headers);for(const l of W.shallows)if(!F.has(l))try{const{object:r}=await Pt({fs:t,cache:e,gitdir:c,oid:l}),i=new ae(r),a=await Promise.all(i.headers().parent.map((r=>Qe({fs:t,cache:e,gitdir:c,oid:r}))));0===a.length||a.every((t=>t))||F.add(l)}catch(Y){F.add(l)}for(const l of W.unshallows)F.delete(l);if(await Xe.write({fs:t,gitdir:c,oids:F}),x){const e=new Map([[N,B]]),r=new Map;let i=10,a=N;for(;i--;){const t=R.symrefs.get(a);if(void 0===t)break;r.set(a,t),a=t}const s=O.get(a);s&&e.set(a,s);const{pruned:n}=await ft.updateRemoteRefs({fs:t,gitdir:c,remote:S,refs:e,symrefs:r,tags:b,prune:v});v&&(W.pruned=n)}else{const{pruned:e}=await ft.updateRemoteRefs({fs:t,gitdir:c,remote:S,refs:O,symrefs:R.symrefs,tags:b,prune:v,pruneTags:_});v&&(W.pruned=e)}if(W.HEAD=R.symrefs.get("HEAD"),void 0===W.HEAD){const{oid:t}=ft.resolveAgainstMap({ref:"HEAD",map:O});for(const[e,r]of O.entries())if("HEAD"!==e&&r===t){W.HEAD=e;break}}const q=N.startsWith("refs/tags")?"tag":"branch";if(W.FETCH_HEAD={oid:B,description:`${q} '${Ce(N)}' of ${j}`},i||a){Me(sr(W.progress),(async t=>{if(a&&await a(t),i){const e=t.match(/([^:]*).*\((\d+?)\/(\d+?)\)/);e&&await i({phase:e[1].trim(),loaded:parseInt(e[2],10),total:parseInt(e[3],10)})}}))}const L=l.from(await Te(W.packfile)),V=L.slice(-20).toString("hex"),Z={defaultBranch:W.HEAD,fetchHead:W.FETCH_HEAD.oid,fetchHeadDescription:W.FETCH_HEAD.description};if(W.headers&&(Z.headers=W.headers),v&&(Z.pruned=W.pruned),""!==V&&"5041434b0000000200000000"!==L.slice(0,12).toString("hex")){Z.packfile=`objects/pack/pack-${V}.pack`;const r=K(c,Z.packfile);await t.write(r,L);const a=r=>Pt({fs:t,cache:e,gitdir:c,oid:r}),s=await kt.fromPack({pack:L,getExternalRefDelta:a,onProgress:i});await t.write(r.replace(/\.pack$/,".idx"),await s.toBuffer())}return Z}async function cr({fs:t,bare:e=!1,dir:r,gitdir:i=(e?r:K(r,".git")),defaultBranch:a="master"}){if(await t.exists(i+"/config"))return;let s=["hooks","info","objects/info","objects/pack","refs/heads","refs/tags"];s=s.map((t=>i+"/"+t));for(const n of s)await t.mkdir(n);await t.write(i+"/config",`[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = ${e}\n`+(e?"":"\tlogallrefupdates = true\n")+"\tsymlinks = false\n\tignorecase = true\n"),await t.write(i+"/HEAD",`ref: refs/heads/${a}\n`)}async function fr({fs:t,cache:e,gitdir:r,oid:i}){const a=await async function({fs:t,gitdir:e,oid:r}){const i=r.slice(0,2);return(await t.readdir(`${e}/objects/${i}`)).map((t=>`${i}${t}`)).filter((t=>t.startsWith(r)))}({fs:t,gitdir:r,oid:i}),s=await async function({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){const s=[];let n=await t.readdir(K(r,"objects/pack"));n=n.filter((t=>t.endsWith(".idx")));for(const o of n){const n=`${r}/objects/pack/${o}`,c=await jt({fs:t,cache:e,filename:n,getExternalRefDelta:a});if(c.error)throw new u(c.error);for(const t of c.offsets.keys())t.startsWith(i)&&s.push(t)}return s}({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>Pt({fs:t,cache:e,gitdir:r,oid:i})}),n=a.concat(s);if(1===n.length)return n[0];if(n.length>1)throw new Rt("oids",i,n);throw new U(`an object matching "${i}"`)}async function dr({fs:t,cache:e,gitdir:r,oids:i}){const a={},s=i.length;let n=i.map(((t,e)=>({index:e,oid:t})));for(;n.length;){const i=new Set;for(const{oid:t,index:e}of n)a[t]||(a[t]=new Set),a[t].add(e),a[t].size===s&&i.add(t);if(i.size>0)return[...i];const c=new Map;for(const{oid:s,index:f}of n)try{const{object:i}=await Pt({fs:t,cache:e,gitdir:r,oid:s}),n=ae.from(i),{parent:o}=n.parseHeaders();for(const t of o)a[t]&&a[t].has(f)||c.set(t+":"+f,{oid:t,index:f})}catch(o){}n=Array.from(c.values())}return[]}const lr=/^.*(\r?\n|$)/gm;async function hr({fs:t,cache:e,dir:r,gitdir:i=K(r,".git"),ourOid:a,baseOid:s,theirOid:n,ourName:o="ours",baseName:c="base",theirName:f="theirs",dryRun:h=!1}){const u=oe({ref:a}),g=oe({ref:s}),w=oe({ref:n}),p=await Ie({fs:t,cache:e,dir:r,gitdir:i,trees:[u,g,w],map:async function(e,[r,a,s]){const n=R(e);switch(`${await ur(r,a)}-${await ur(s,a)}`){case"false-false":return{mode:await a.mode(),path:n,oid:await a.oid(),type:await a.type()};case"false-true":return s?{mode:await s.mode(),path:n,oid:await s.oid(),type:await s.type()}:void 0;case"true-false":return r?{mode:await r.mode(),path:n,oid:await r.oid(),type:await r.type()}:void 0;case"true-true":if(r&&a&&s&&"blob"===await r.type()&&"blob"===await a.type()&&"blob"===await s.type())return async function({fs:t,gitdir:e,path:r,ours:i,base:a,theirs:s,ourName:n,theirName:o,baseName:c,format:f,markerSize:h,dryRun:u}){const g="blob",w=await a.mode()===await i.mode()?await s.mode():await i.mode();if(await i.oid()===await s.oid())return{mode:w,path:r,oid:await i.oid(),type:g};if(await i.oid()===await a.oid())return{mode:w,path:r,oid:await s.oid(),type:g};if(await s.oid()===await a.oid())return{mode:w,path:r,oid:await i.oid(),type:g};const{mergedText:p,cleanMerge:m}=function({ourContent:t,baseContent:e,theirContent:r,ourName:i="ours",baseName:a="base",theirName:s="theirs",format:n="diff",markerSize:o=7}){const c=t.match(lr),f=e.match(lr),l=r.match(lr),h=d(c,f,l);let u="",g=!0;for(const d of h)d.ok&&(u+=d.ok.join("")),d.conflict&&(g=!1,u+=`${"<".repeat(o)} ${i}\n`,u+=d.conflict.a.join(""),"diff3"===n&&(u+=`${"|".repeat(o)} ${a}\n`,u+=d.conflict.o.join("")),u+=`${"=".repeat(o)}\n`,u+=d.conflict.b.join(""),u+=`${">".repeat(o)} ${s}\n`);return{cleanMerge:g,mergedText:u}}({ourContent:l.from(await i.content()).toString("utf8"),baseContent:l.from(await a.content()).toString("utf8"),theirContent:l.from(await s.content()).toString("utf8"),ourName:n,theirName:o,baseName:c,format:f,markerSize:h});if(!m)throw new Ft;const y=await we({fs:t,gitdir:e,type:"blob",object:l.from(p,"utf8"),dryRun:u});return{mode:w,path:r,oid:y,type:g}}({fs:t,gitdir:i,path:n,ours:r,base:a,theirs:s,ourName:o,baseName:c,theirName:f});throw new Ft}},reduce:async(e,r)=>{const a=r.filter(Boolean);if(e&&(!e||"tree"!==e.type||0!==a.length)){if(a.length>0){const r=new gt(a).toObject(),s=await we({fs:t,gitdir:i,type:"tree",object:r,dryRun:h});e.oid=s}return e}}});return p.oid}async function ur(t,e){return!(!t&&!e)&&(!(!t||e)||(!(t||!e)||("tree"!==await t.type()||"tree"!==await e.type())&&(await t.type()!==await e.type()||await t.mode()!==await e.mode()||await t.oid()!==await e.oid())))}async function gr({fs:t,cache:e,gitdir:r,ours:i,theirs:a,fastForward:s=!0,fastForwardOnly:n=!1,dryRun:o=!1,noUpdateBranch:c=!1,message:f,author:d,committer:l,signingKey:h,onSign:u}){void 0===i&&(i=await Ue({fs:t,gitdir:r,fullname:!0})),i=await ft.expand({fs:t,gitdir:r,ref:i}),a=await ft.expand({fs:t,gitdir:r,ref:a});const g=await ft.resolve({fs:t,gitdir:r,ref:i}),w=await ft.resolve({fs:t,gitdir:r,ref:a}),p=await dr({fs:t,cache:e,gitdir:r,oids:[g,w]});if(1!==p.length)throw new Ft;const m=p[0];if(m===w)return{oid:g,alreadyMerged:!0};if(s&&m===g)return o||c||await ft.writeRef({fs:t,gitdir:r,ref:i,value:w}),{oid:w,fastForward:!0};{if(n)throw new Nt;const s=await hr({fs:t,cache:e,gitdir:r,ourOid:g,theirOid:w,baseOid:m,ourName:i,baseName:"base",theirName:a,dryRun:o});f||(f=`Merge branch '${Ce(a)}' into ${Ce(i)}`);return{oid:await ye({fs:t,cache:e,gitdir:r,message:f,ref:i,tree:s,parent:[g,w],author:d,committer:l,signingKey:h,onSign:u,dryRun:o,noUpdateBranch:c}),tree:s,mergeCommit:!0}}}async function wr({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,dir:c,gitdir:f,ref:d,url:l,remote:h,remoteRef:u,fastForward:g,fastForwardOnly:w,corsProxy:p,singleBranch:m,headers:y,author:b,committer:x,signingKey:$}){try{if(!d){const e=await Ue({fs:t,gitdir:f});if(!e)throw new zt("ref");d=e}const{fetchHead:v,fetchHeadDescription:_}=await or({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,gitdir:f,corsProxy:p,ref:d,url:l,remote:h,remoteRef:u,singleBranch:m,headers:y});await gr({fs:t,cache:e,gitdir:f,ours:d,theirs:v,fastForward:g,fastForwardOnly:w,message:`Merge ${_}`,author:b,committer:x,signingKey:$,dryRun:!1,noUpdateBranch:!1}),await Be({fs:t,cache:e,onProgress:i,dir:c,gitdir:f,ref:d,remote:h,noCheckout:!1})}catch(v){throw v.caller="git.pull",v}}async function pr({fs:t,filepath:e}){if(await t.exists(K(e,".git")))return e;{const r=I(e);if(r===e)throw new U(`git root for ${e}`);return pr({fs:t,filepath:r})}}function mr(t,e,r,i){const a=[];for(const[s,n]of t.refs){if(e&&!s.startsWith(e))continue;if(s.endsWith("^{}")){if(i){const t=s.replace("^{}",""),e=a[a.length-1],r=e.ref===t?e:a.find((e=>e.ref===t));if(void 0===r)throw new Error("I did not expect this to happen");r.peeled=n}continue}const o={ref:s,oid:n};r&&t.symrefs.has(s)&&(o.target=t.symrefs.get(s)),a.push(o)}return a}async function yr({fs:t,cache:e,gitdir:r,oid:i,ancestor:a,depth:s}){const n=await Xe.read({fs:t,gitdir:r});if(!i)throw new zt("oid");if(!a)throw new zt("ancestor");if(i===a)return!1;const o=[i],c=new Set;let f=0;for(;o.length;){if(f++===s)throw new Tt(s);const i=o.shift(),{type:d,object:l}=await Pt({fs:t,cache:e,gitdir:r,oid:i});if("commit"!==d)throw new D(i,d,"commit");const h=ae.from(l).parse();for(const t of h.parent)if(t===a)return!0;if(!n.has(i))for(const t of h.parent)c.has(t)||(o.push(t),c.add(t))}return!1}async function br({fs:t,gitdir:e,ref:r,cache:i}){if(r){const a=await ft.resolve({gitdir:e,fs:t,ref:r}),s=[];return await xr({fs:t,cache:i,gitdir:e,oid:a,filenames:s,prefix:""}),s}return A.acquire({fs:t,gitdir:e,cache:i},(async function(t){return t.entries.map((t=>t.path))}))}async function xr({fs:t,cache:e,gitdir:r,oid:i,filenames:a,prefix:s}){const{tree:n}=await ve({fs:t,cache:e,gitdir:r,oid:i});for(const o of n)"tree"===o.type?await xr({fs:t,cache:e,gitdir:r,oid:o.oid,filenames:a,prefix:K(s,o.path)}):a.push(K(s,o.path))}async function $r({fs:t,cache:e,gitdir:r,oid:i}){const{type:a,object:s}=await Pt({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return $r({fs:t,cache:e,gitdir:r,oid:i=re.from(s).parse().object});if("commit"!==a)throw new D(i,a,"commit");return{commit:ae.from(s),oid:i}}async function vr({fs:t,cache:e,gitdir:r,oid:i}){const{commit:a,oid:s}=await $r({fs:t,cache:e,gitdir:r,oid:i});return{oid:s,commit:a.parse(),payload:a.withoutSignature()}}function _r(t,e){return t.committer.timestamp-e.committer.timestamp}async function Er({fs:t,cache:e,gitdir:r,oid:i,fileId:a}){if("e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"===a)return;const s=i;let n;const o=await se({fs:t,cache:e,gitdir:r,oid:i}),c=o.tree;return a===o.oid?n=o.path:(n=await kr({fs:t,cache:e,gitdir:r,tree:c,fileId:a,oid:s}),Array.isArray(n)&&(0===n.length?n=void 0:1===n.length&&(n=n[0]))),n}async function kr({fs:t,cache:e,gitdir:r,tree:i,fileId:a,oid:s,filepaths:n=[],parentPath:o=""}){const c=i.entries().map((function(i){let c;return i.oid===a?(c=K(o,i.path),n.push(c)):"tree"===i.type&&(c=Pt({fs:t,cache:e,gitdir:r,oid:i.oid}).then((function({object:c}){return kr({fs:t,cache:e,gitdir:r,tree:gt.from(c),fileId:a,oid:s,filepaths:n,parentPath:K(o,i.path)})}))),c}));return await Promise.all(c),n}const Sr={commit:16,tree:32,blob:48,tag:64,ofs_delta:96,ref_delta:112};async function jr({fs:t,cache:e,dir:r,gitdir:i=K(r,".git"),oids:s}){const n=new a,o=[];function c(t,e){const r=l.from(t,e);o.push(r),n.update(r)}async function f({stype:t,object:e}){const r=Sr[t];let i=e.length,a=i>15?128:0;const s=15&i;i>>>=4;let n=(a|r|s).toString(16);for(c(n,"hex");a;)a=i>127?128:0,n=a|127&i,c(He(2,n),"hex"),i>>>=7;c(l.from(await ge(e)))}c("PACK"),c("00000002","hex"),c(He(8,s.length),"hex");for(const a of s){const{type:r,object:s}=await Pt({fs:t,cache:e,gitdir:i,oid:a});await f({write:c,object:s,stype:r})}const d=n.digest();return o.push(d),o}async function Pr({fs:t,cache:e,dir:r,gitdir:i=K(r,".git"),oids:a}){const s=new Set;async function n(r){if(s.has(r))return;s.add(r);const{type:a,object:o}=await Pt({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a){const t=re.from(o).headers().object;await n(t)}else if("commit"===a){const t=ae.from(o).headers().tree;await n(t)}else if("tree"===a){const t=gt.from(o);for(const e of t)"blob"===e.type&&s.add(e.oid),"tree"===e.type&&await n(e.oid)}}for(const o of a)await n(o);return s}async function Ar({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,gitdir:c,ref:f,remoteRef:d,remote:l,url:h,force:u=!1,delete:g=!1,corsProxy:w,headers:p={}}){const m=f||await Ue({fs:t,gitdir:c});if("undefined"===typeof m)throw new zt("ref");const y=await nt.get({fs:t,gitdir:c});l=l||await y.get(`branch.${m}.pushRemote`)||await y.get("remote.pushDefault")||await y.get(`branch.${m}.remote`)||"origin";const b=h||await y.get(`remote.${l}.pushurl`)||await y.get(`remote.${l}.url`);if("undefined"===typeof b)throw new zt("remote OR url");const x=d||await y.get(`branch.${m}.merge`);if("undefined"===typeof b)throw new zt("remoteRef");void 0===w&&(w=await y.get("http.corsProxy"));const $=await ft.expand({fs:t,gitdir:c,ref:m}),v=g?"0000000000000000000000000000000000000000":await ft.resolve({fs:t,gitdir:c,ref:$}),_=Ye.getRemoteHelperFor({url:b}),E=await _.discover({http:r,onAuth:s,onAuthSuccess:n,onAuthFailure:o,corsProxy:w,service:"git-receive-pack",url:b,headers:p,protocolVersion:1}),k=E.auth;let S;if(x)try{S=await ft.expandAgainstMap({ref:x,map:E.refs})}catch(T){if(!(T instanceof U))throw T;S=x.startsWith("refs/")?x:`refs/heads/${x}`}else S=$;const j=E.refs.get(S)||"0000000000000000000000000000000000000000",P=!E.capabilities.has("no-thin");let A=new Set;if(!g){const r=[...E.refs.values()];let i=new Set;if("0000000000000000000000000000000000000000"!==j){const a=await dr({fs:t,cache:e,gitdir:c,oids:[v,j]});for(const t of a)r.push(t);P&&(i=await Pr({fs:t,cache:e,gitdir:c,oids:a}))}if(!r.includes(v)){const i=await async function({fs:t,cache:e,dir:r,gitdir:i=K(r,".git"),start:a,finish:s}){const n=await Xe.read({fs:t,gitdir:i}),o=new Set,c=new Set;for(const l of a)o.add(await ft.resolve({fs:t,gitdir:i,ref:l}));for(const l of s)try{const e=await ft.resolve({fs:t,gitdir:i,ref:l});c.add(e)}catch(T){}const f=new Set;async function d(r){f.add(r);const{type:a,object:s}=await Pt({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a)return d(re.from(s).headers().object);if("commit"!==a)throw new D(r,a,"commit");if(!n.has(r)){const t=ae.from(s).headers().parent;for(r of t)c.has(r)||f.has(r)||await d(r)}}for(const l of o)await d(l);return f}({fs:t,cache:e,gitdir:c,start:[v],finish:r});A=await Pr({fs:t,cache:e,gitdir:c,oids:i})}if(P){try{const r=await ft.resolve({fs:t,gitdir:c,ref:`refs/remotes/${l}/HEAD`,depth:2}),{oid:a}=await ft.resolveAgainstMap({ref:r.replace(`refs/remotes/${l}/`,""),fullref:r,map:E.refs}),s=[a];for(const n of await Pr({fs:t,cache:e,gitdir:c,oids:s}))i.add(n)}catch(F){}for(const t of i)A.delete(t)}if(!u){if($.startsWith("refs/tags")&&"0000000000000000000000000000000000000000"!==j)throw new Kt("tag-exists");if("0000000000000000000000000000000000000000"!==v&&"0000000000000000000000000000000000000000"!==j&&!(await yr({fs:t,cache:e,gitdir:c,oid:v,ancestor:j,depth:-1})))throw new Kt("not-fast-forward")}}const R=tr([...E.capabilities],["report-status","side-band-64k",`agent=${rr}`]),I=await async function({capabilities:t=[],triplets:e=[]}){const r=[];let i=`\0 ${t.join(" ")}`;for(const a of e)r.push(ze.encode(`${a.oldoid} ${a.oid} ${a.fullRef}${i}\n`)),i="";return r.push(ze.flush()),r}({capabilities:R,triplets:[{oldoid:j,oid:v,fullRef:S}]}),O=g?[]:await jr({fs:t,cache:e,gitdir:c,oids:[...A]}),B=await _.connect({http:r,onProgress:i,corsProxy:w,service:"git-receive-pack",url:b,auth:k,headers:p,body:[...I,...O]}),{packfile:N,progress:C}=await nr.demux(B.body);if(a){Me(sr(C),(async t=>{await a(t)}))}const M=await async function(t){const e={};let r="";const i=ze.streamReader(t);let a=await i();for(;!0!==a;)null!==a&&(r+=a.toString("utf8")+"\n"),a=await i();const s=r.toString("utf8").split("\n");if(a=s.shift(),!a.startsWith("unpack "))throw new Wt('unpack ok" or "unpack [error message]',a);e.ok="unpack ok"===a,e.ok||(e.error=a.slice("unpack ".length)),e.refs={};for(const n of s){if(""===n.trim())continue;const t=n.slice(0,2),r=n.slice(3);let i=r.indexOf(" ");-1===i&&(i=r.length);const a=r.slice(0,i),s=r.slice(i+1);e.refs[a]={ok:"ok"===t,error:s}}return e}(N);if(B.headers&&(M.headers=B.headers),l&&M.ok&&M.refs[S].ok){const e=`refs/remotes/${l}/${S.replace("refs/heads","")}`;g?await ft.deleteRef({fs:t,gitdir:c,ref:e}):await ft.writeRef({fs:t,gitdir:c,ref:e,value:v})}if(M.ok&&Object.values(M.refs).every((t=>t.ok)))return M;{const t=Object.entries(M.refs).filter((([t,e])=>!e.ok)).map((([t,e])=>`\n  - ${t}: ${e.error}`)).join("");throw new Ct(t,M)}}async function Rr({fs:t,cache:e,gitdir:r,oid:i}){const{type:a,object:s}=await Pt({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return Rr({fs:t,cache:e,gitdir:r,oid:i=re.from(s).parse().object});if("blob"!==a)throw new D(i,a,"blob");return{oid:i,blob:new Uint8Array(s)}}async function Ir({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){void 0!==a&&(i=await xe({fs:t,cache:e,gitdir:r,oid:i,filepath:a}));return await Rr({fs:t,cache:e,gitdir:r,oid:i})}async function Or({gitdir:t,type:e,object:r}){return _(wt.wrap({type:e,object:r}))}async function Br({fs:t,cache:e,gitdir:r,tree:i,path:a}){"string"===typeof a&&(a=a.split("/"));const s=a.shift();for(const n of i)if(n.path===s){if(0===a.length)return n.oid;const{type:i,object:s}=await Pt({fs:t,cache:e,gitdir:r,oid:n.oid});if("tree"===i){return Br({fs:t,cache:e,gitdir:r,tree:gt.from(s),path:a})}if("blob"===i)throw new D(n.oid,i,"blob",a.join("/"))}return null}var Nr={Errors:Jt,STAGE:C,TREE:oe,WORKDIR:fe,add:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i,cache:a={},force:s=!1}){try{pe("fs",t),pe("dir",e),pe("gitdir",r),pe("filepath",i);const n=new he(t);await A.acquire({fs:n,gitdir:r,cache:a},(async t=>me({dir:e,gitdir:r,fs:n,filepath:i,index:t,force:s})))}catch(n){throw n.caller="git.add",n}},addNote:async function({fs:t,onSign:e,dir:r,gitdir:i=K(r,".git"),ref:a="refs/notes/commits",oid:s,note:n,force:o,author:c,committer:f,signingKey:d,cache:h={}}){try{pe("fs",t),pe("gitdir",i),pe("oid",s),pe("note",n),d&&pe("onSign",e);const r=new he(t),u=await ke({fs:r,gitdir:i,author:c});if(!u)throw new Ht("author");const g=await Se({fs:r,gitdir:i,author:u,committer:f});if(!g)throw new Ht("committer");return await async function({fs:t,cache:e,onSign:r,gitdir:i,ref:a,oid:s,note:n,force:o,author:c,committer:f,signingKey:d}){let h;try{h=await ft.resolve({gitdir:i,fs:t,ref:a})}catch(p){if(!(p instanceof U))throw p}let u=(await ve({fs:t,cache:e,gitdir:i,oid:h||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;if(o)u=u.filter((t=>t.path!==s));else for(const l of u)if(l.path===s)throw new At("note",s);"string"===typeof n&&(n=l.from(n,"utf8"));const g=await we({fs:t,gitdir:i,type:"blob",object:n,format:"content"});u.push({mode:"100644",path:s,oid:g,type:"blob"});const w=await _e({fs:t,gitdir:i,tree:u});return await ye({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:w,parent:h&&[h],message:"Note added by 'isomorphic-git addNote'\n",author:c,committer:f,signingKey:d})}({fs:new he(r),cache:h,onSign:e,gitdir:i,ref:a,oid:s,note:n,force:o,author:u,committer:g,signingKey:d})}catch(u){throw u.caller="git.addNote",u}},addRemote:async function({fs:t,dir:e,gitdir:r=K(e,".git"),remote:i,url:a,force:s=!1}){try{return pe("fs",t),pe("gitdir",r),pe("remote",i),pe("url",a),await je({fs:new he(t),gitdir:r,remote:i,url:a,force:s})}catch(n){throw n.caller="git.addRemote",n}},annotatedTag:async function({fs:t,onSign:e,dir:r,gitdir:i=K(r,".git"),ref:a,tagger:s,message:n=a,gpgsig:o,object:c,signingKey:f,force:d=!1,cache:l={}}){try{pe("fs",t),pe("gitdir",i),pe("ref",a),f&&pe("onSign",e);const r=new he(t),h=await ke({fs:r,gitdir:i,author:s});if(!h)throw new Ht("tagger");return await async function({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tagger:s,message:n=a,gpgsig:o,object:c,signingKey:f,force:d=!1}){if(a=a.startsWith("refs/tags/")?a:`refs/tags/${a}`,!d&&await ft.exists({fs:t,gitdir:i,ref:a}))throw new At("tag",a);const l=await ft.resolve({fs:t,gitdir:i,ref:c||"HEAD"}),{type:h}=await Pt({fs:t,cache:e,gitdir:i,oid:l});let u=re.from({object:l,type:h,tag:a.replace("refs/tags/",""),tagger:s,message:n,gpgsig:o});f&&(u=await re.sign(u,r,f));const g=await we({fs:t,gitdir:i,type:"tag",object:u.toObject()});await ft.writeRef({fs:t,gitdir:i,ref:a,value:g})}({fs:r,cache:l,onSign:e,gitdir:i,ref:a,tagger:h,message:n,gpgsig:o,object:c,signingKey:f,force:d})}catch(h){throw h.caller="git.annotatedTag",h}},branch:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,checkout:a=!1}){try{return pe("fs",t),pe("gitdir",r),pe("ref",i),await async function({fs:t,gitdir:e,ref:r,checkout:i=!1}){if(r!==f.clean(r))throw new Mt(r,f.clean(r));const a=`refs/heads/${r}`;if(await ft.exists({fs:t,gitdir:e,ref:a}))throw new At("branch",r,!1);let s;try{s=await ft.resolve({fs:t,gitdir:e,ref:"HEAD"})}catch(n){}s&&await ft.writeRef({fs:t,gitdir:e,ref:a,value:s}),i&&await ft.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:a})}({fs:new he(t),gitdir:r,ref:i,checkout:a})}catch(s){throw s.caller="git.branch",s}},checkout:async function({fs:t,onProgress:e,dir:r,gitdir:i=K(r,".git"),remote:a="origin",ref:s,filepaths:n,noCheckout:o=!1,noUpdateHead:c=void 0===s,dryRun:f=!1,force:d=!1,track:l=!0,cache:h={}}){try{pe("fs",t),pe("dir",r),pe("gitdir",i);const u=s||"HEAD";return await Be({fs:new he(t),cache:h,onProgress:e,dir:r,gitdir:i,remote:a,ref:u,filepaths:n,noCheckout:o,noUpdateHead:c,dryRun:f,force:d,track:l})}catch(u){throw u.caller="git.checkout",u}},clone:async function({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c=K(o,".git"),url:f,corsProxy:d,ref:l,remote:h="origin",depth:u,since:g,exclude:w=[],relative:p=!1,singleBranch:m=!1,noCheckout:y=!1,noTags:b=!1,headers:x={},cache:$={}}){try{return pe("fs",t),pe("http",e),pe("gitdir",c),y||pe("dir",o),pe("url",f),await async function({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,dir:c,gitdir:f,url:d,corsProxy:l,ref:h,remote:u,depth:g,since:w,exclude:p,relative:m,singleBranch:y,noCheckout:b,noTags:x,headers:$}){try{if(await cr({fs:t,gitdir:f}),await je({fs:t,gitdir:f,remote:u,url:d,force:!1}),l){const e=await nt.get({fs:t,gitdir:f});await e.set("http.corsProxy",l),await nt.save({fs:t,gitdir:f,config:e})}const{defaultBranch:v,fetchHead:_}=await or({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:s,onAuthSuccess:n,onAuthFailure:o,gitdir:f,ref:h,remote:u,corsProxy:l,depth:g,since:w,exclude:p,relative:m,singleBranch:y,headers:$,tags:!x});if(null===_)return;h=(h=h||v).replace("refs/heads/",""),await Be({fs:t,cache:e,onProgress:i,dir:c,gitdir:f,ref:h,remote:u,noCheckout:b})}catch(v){throw await t.rmdir(f,{recursive:!0,maxRetries:10}).catch((()=>{})),v}}({fs:new he(t),cache:$,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c,url:f,corsProxy:d,ref:l,remote:h,depth:u,since:g,exclude:w,relative:p,singleBranch:m,noCheckout:y,noTags:b,headers:x})}catch(v){throw v.caller="git.clone",v}},commit:async function({fs:t,onSign:e,dir:r,gitdir:i=K(r,".git"),message:a,author:s,committer:n,signingKey:o,dryRun:c=!1,noUpdateBranch:f=!1,ref:d,parent:l,tree:h,cache:u={}}){try{pe("fs",t),pe("message",a),o&&pe("onSign",e);const r=new he(t),g=await ke({fs:r,gitdir:i,author:s});if(!g)throw new Ht("author");const w=await Se({fs:r,gitdir:i,author:g,committer:n});if(!w)throw new Ht("committer");return await ye({fs:r,cache:u,onSign:e,gitdir:i,message:a,author:g,committer:w,signingKey:o,dryRun:c,noUpdateBranch:f,ref:d,parent:l,tree:h})}catch(g){throw g.caller="git.commit",g}},getConfig:async function({fs:t,dir:e,gitdir:r=K(e,".git"),path:i}){try{return pe("fs",t),pe("gitdir",r),pe("path",i),await Ee({fs:new he(t),gitdir:r,path:i})}catch(a){throw a.caller="git.getConfig",a}},getConfigAll:async function({fs:t,dir:e,gitdir:r=K(e,".git"),path:i}){try{return pe("fs",t),pe("gitdir",r),pe("path",i),await async function({fs:t,gitdir:e,path:r}){return(await nt.get({fs:t,gitdir:e})).getall(r)}({fs:new he(t),gitdir:r,path:i})}catch(a){throw a.caller="git.getConfigAll",a}},setConfig:async function({fs:t,dir:e,gitdir:r=K(e,".git"),path:i,value:a,append:s=!1}){try{pe("fs",t),pe("gitdir",r),pe("path",i);const e=new he(t),n=await nt.get({fs:e,gitdir:r});s?await n.append(i,a):await n.set(i,a),await nt.save({fs:e,gitdir:r,config:n})}catch(n){throw n.caller="git.setConfig",n}},currentBranch:async function({fs:t,dir:e,gitdir:r=K(e,".git"),fullname:i=!1,test:a=!1}){try{return pe("fs",t),pe("gitdir",r),await Ue({fs:new he(t),gitdir:r,fullname:i,test:a})}catch(s){throw s.caller="git.currentBranch",s}},deleteBranch:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i}){try{return pe("fs",t),pe("ref",i),await async function({fs:t,gitdir:e,ref:r}){if(!(await ft.exists({fs:t,gitdir:e,ref:r})))throw new U(r);const i=await ft.expand({fs:t,gitdir:e,ref:r});if(i===await Ue({fs:t,gitdir:e,fullname:!0})){const r=await ft.resolve({fs:t,gitdir:e,ref:i});await ft.writeRef({fs:t,gitdir:e,ref:"HEAD",value:r})}await ft.deleteRef({fs:t,gitdir:e,ref:i})}({fs:new he(t),gitdir:r,ref:i})}catch(a){throw a.caller="git.deleteBranch",a}},deleteRef:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i}){try{pe("fs",t),pe("ref",i),await ft.deleteRef({fs:new he(t),gitdir:r,ref:i})}catch(a){throw a.caller="git.deleteRef",a}},deleteRemote:async function({fs:t,dir:e,gitdir:r=K(e,".git"),remote:i}){try{return pe("fs",t),pe("remote",i),await async function({fs:t,gitdir:e,remote:r}){const i=await nt.get({fs:t,gitdir:e});await i.deleteSection("remote",r),await nt.save({fs:t,gitdir:e,config:i})}({fs:new he(t),gitdir:r,remote:i})}catch(a){throw a.caller="git.deleteRemote",a}},deleteTag:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i}){try{return pe("fs",t),pe("ref",i),await async function({fs:t,gitdir:e,ref:r}){r=r.startsWith("refs/tags/")?r:`refs/tags/${r}`,await ft.deleteRef({fs:t,gitdir:e,ref:r})}({fs:new he(t),gitdir:r,ref:i})}catch(a){throw a.caller="git.deleteTag",a}},expandOid:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,cache:a={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),await fr({fs:new he(t),cache:a,gitdir:r,oid:i})}catch(s){throw s.caller="git.expandOid",s}},expandRef:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i}){try{return pe("fs",t),pe("gitdir",r),pe("ref",i),await ft.expand({fs:new he(t),gitdir:r,ref:i})}catch(a){throw a.caller="git.expandRef",a}},fastForward:async function({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c=K(o,".git"),ref:f,url:d,remote:l,remoteRef:h,corsProxy:u,singleBranch:g,headers:w={},cache:p={}}){try{pe("fs",t),pe("http",e),pe("gitdir",c);const m={name:"",email:"",timestamp:Date.now(),timezoneOffset:0};return await wr({fs:new he(t),cache:p,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c,ref:f,url:d,remote:l,remoteRef:h,fastForwardOnly:!0,corsProxy:u,singleBranch:g,headers:w,author:m,committer:m})}catch(m){throw m.caller="git.fastForward",m}},fetch:async function({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c=K(o,".git"),ref:f,remote:d,remoteRef:l,url:h,corsProxy:u,depth:g=null,since:w=null,exclude:p=[],relative:m=!1,tags:y=!1,singleBranch:b=!1,headers:x={},prune:$=!1,pruneTags:v=!1,cache:_={}}){try{return pe("fs",t),pe("http",e),pe("gitdir",c),await or({fs:new he(t),cache:_,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,gitdir:c,ref:f,remote:d,remoteRef:l,url:h,corsProxy:u,depth:g,since:w,exclude:p,relative:m,tags:y,singleBranch:b,headers:x,prune:$,pruneTags:v})}catch(E){throw E.caller="git.fetch",E}},findMergeBase:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oids:i,cache:a={}}){try{return pe("fs",t),pe("gitdir",r),pe("oids",i),await dr({fs:new he(t),cache:a,gitdir:r,oids:i})}catch(s){throw s.caller="git.findMergeBase",s}},findRoot:async function({fs:t,filepath:e}){try{return pe("fs",t),pe("filepath",e),await pr({fs:new he(t),filepath:e})}catch(r){throw r.caller="git.findRoot",r}},getRemoteInfo:async function({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:s,headers:n={},forPush:o=!1}){try{pe("http",t),pe("url",s);const c=Ye.getRemoteHelperFor({url:s}),f=await c.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:s,headers:n,protocolVersion:1}),d={capabilities:[...f.capabilities]};for(const[t,e]of f.refs){const r=t.split("/"),i=r.pop();let a=d;for(const t of r)a[t]=a[t]||{},a=a[t];a[i]=e}for(const[t,e]of f.symrefs){const r=t.split("/"),i=r.pop();let a=d;for(const t of r)a[t]=a[t]||{},a=a[t];a[i]=e}return d}catch(c){throw c.caller="git.getRemoteInfo",c}},getRemoteInfo2:async function({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:s,headers:n={},forPush:o=!1,protocolVersion:c=2}){try{pe("http",t),pe("url",s);const f=Ye.getRemoteHelperFor({url:s}),d=await f.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:s,headers:n,protocolVersion:c});if(2===d.protocolVersion)return{protocolVersion:d.protocolVersion,capabilities:d.capabilities2};const l={};for(const t of d.capabilities){const[e,r]=t.split("=");l[e]=r||!0}return{protocolVersion:1,capabilities:l,refs:mr(d,void 0,!0,!0)}}catch(f){throw f.caller="git.getRemoteInfo2",f}},hashBlob:async function({object:t}){try{pe("object",t),t="string"===typeof t?l.from(t,"utf8"):l.from(t);const e="blob",{oid:r,object:i}=await async function({type:t,object:e,format:r="content",oid:i}){return"deflated"!==r&&("wrapped"!==r&&(e=wt.wrap({type:t,object:e})),i=await _(e)),{oid:i,object:e}}({type:"blob",format:"content",object:t});return{oid:r,type:e,object:new Uint8Array(i),format:"wrapped"}}catch(e){throw e.caller="git.hashBlob",e}},indexPack:async function({fs:t,onProgress:e,dir:r,gitdir:i=K(r,".git"),filepath:a,cache:s={}}){try{return pe("fs",t),pe("dir",r),pe("gitdir",r),pe("filepath",a),await async function({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,filepath:s}){try{s=K(i,s);const n=await t.read(s),o=r=>Pt({fs:t,cache:e,gitdir:a,oid:r}),c=await kt.fromPack({pack:n,getExternalRefDelta:o,onProgress:r});return await t.write(s.replace(/\.pack$/,".idx"),await c.toBuffer()),{oids:[...c.hashes]}}catch(n){throw n.caller="git.indexPack",n}}({fs:new he(t),cache:s,onProgress:e,dir:r,gitdir:i,filepath:a})}catch(n){throw n.caller="git.indexPack",n}},init:async function({fs:t,bare:e=!1,dir:r,gitdir:i=(e?r:K(r,".git")),defaultBranch:a="master"}){try{return pe("fs",t),pe("gitdir",i),e||pe("dir",r),await cr({fs:new he(t),bare:e,dir:r,gitdir:i,defaultBranch:a})}catch(s){throw s.caller="git.init",s}},isDescendent:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,ancestor:a,depth:s=-1,cache:n={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),pe("ancestor",a),await yr({fs:new he(t),cache:n,gitdir:r,oid:i,ancestor:a,depth:s})}catch(o){throw o.caller="git.isDescendent",o}},isIgnored:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i}){try{return pe("fs",t),pe("dir",e),pe("gitdir",r),pe("filepath",i),de.isIgnored({fs:new he(t),dir:e,gitdir:r,filepath:i})}catch(a){throw a.caller="git.isIgnored",a}},listBranches:async function({fs:t,dir:e,gitdir:r=K(e,".git"),remote:i}){try{return pe("fs",t),pe("gitdir",r),ft.listBranches({fs:new he(t),gitdir:r,remote:i})}catch(a){throw a.caller="git.listBranches",a}},listFiles:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,cache:a={}}){try{return pe("fs",t),pe("gitdir",r),await br({fs:new he(t),cache:a,gitdir:r,ref:i})}catch(s){throw s.caller="git.listFiles",s}},listNotes:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i="refs/notes/commits",cache:a={}}){try{return pe("fs",t),pe("gitdir",r),pe("ref",i),await async function({fs:t,cache:e,gitdir:r,ref:i}){let a;try{a=await ft.resolve({gitdir:r,fs:t,ref:i})}catch(s){if(s instanceof U)return[]}return(await ve({fs:t,cache:e,gitdir:r,oid:a})).tree.map((t=>({target:t.path,note:t.oid})))}({fs:new he(t),cache:a,gitdir:r,ref:i})}catch(s){throw s.caller="git.listNotes",s}},listRemotes:async function({fs:t,dir:e,gitdir:r=K(e,".git")}){try{return pe("fs",t),pe("gitdir",r),await async function({fs:t,gitdir:e}){const r=await nt.get({fs:t,gitdir:e}),i=await r.getSubsections("remote");return Promise.all(i.map((async t=>({remote:t,url:await r.get(`remote.${t}.url`)}))))}({fs:new he(t),gitdir:r})}catch(i){throw i.caller="git.listRemotes",i}},listServerRefs:async function({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:s,headers:n={},forPush:o=!1,protocolVersion:c=2,prefix:f,symrefs:d,peelTags:l}){try{pe("http",t),pe("url",s);const h=await Ze.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:s,headers:n,protocolVersion:c});if(1===h.protocolVersion)return mr(h,f,d,l);const u=await async function({prefix:t,symrefs:e,peelTags:r}){const i=[];return i.push(ze.encode("command=ls-refs\n")),i.push(ze.encode(`agent=${rr}\n`)),(r||e||t)&&i.push(ze.delim()),r&&i.push(ze.encode("peel")),e&&i.push(ze.encode("symrefs")),t&&i.push(ze.encode(`ref-prefix ${t}`)),i.push(ze.flush()),i}({prefix:f,symrefs:d,peelTags:l});return async function(t){const e=ze.streamReader(t),r=[];let i;for(;i=await e(),!0!==i;){if(null===i)continue;i=i.toString("utf8").replace(/\n$/,"");const[t,e,...a]=i.split(" "),s={ref:e,oid:t};for(const r of a){const[t,e]=r.split(":");"symref-target"===t?s.target=e:"peeled"===t&&(s.peeled=e)}r.push(s)}return r}((await Ze.connect({http:t,auth:h.auth,headers:n,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:s,body:u})).body)}catch(h){throw h.caller="git.listServerRefs",h}},listTags:async function({fs:t,dir:e,gitdir:r=K(e,".git")}){try{return pe("fs",t),pe("gitdir",r),ft.listTags({fs:new he(t),gitdir:r})}catch(i){throw i.caller="git.listTags",i}},log:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i,ref:a="HEAD",depth:s,since:n,force:o,follow:c,cache:f={}}){try{return pe("fs",t),pe("gitdir",r),pe("ref",a),await async function({fs:t,cache:e,gitdir:r,filepath:i,ref:a,depth:s,since:n,force:o,follow:c}){const f="undefined"===typeof n?void 0:Math.floor(n.valueOf()/1e3),d=[],l=await Xe.read({fs:t,gitdir:r}),h=await ft.resolve({fs:t,gitdir:r,ref:a}),u=[await vr({fs:t,cache:e,gitdir:r,oid:h})];let g,w,p;function m(t){p&&i&&d.push(t)}for(;u.length>0;){const a=u.pop();if(void 0!==f&&a.commit.committer.timestamp<=f)break;if(i){let s;try{s=await xe({fs:t,cache:e,gitdir:r,oid:a.commit.tree,filepath:i}),w&&g!==s&&d.push(w),g=s,w=a,p=!0}catch(y){if(!(y instanceof U))throw y;{let s=c&&g;if(s&&(s=await Er({fs:t,cache:e,gitdir:r,oid:a.commit.tree,fileId:g}),s))if(Array.isArray(s)){if(w){const a=await Er({fs:t,cache:e,gitdir:r,oid:w.commit.tree,fileId:g});if(Array.isArray(a)){if(s=s.filter((t=>-1===a.indexOf(t))),1!==s.length){s=!1,w&&d.push(w);break}s=s[0],i=s,w&&d.push(w)}}}else i=s,w&&d.push(w);if(!s){if(p&&g&&(d.push(w),!o))break;if(!o&&!c)throw y}w=a,p=!1}}}else d.push(a);if(void 0!==s&&d.length===s){m(a);break}if(!l.has(a.oid))for(const i of a.commit.parent){const a=await vr({fs:t,cache:e,gitdir:r,oid:i});u.map((t=>t.oid)).includes(a.oid)||u.push(a)}0===u.length&&m(a),u.sort(((t,e)=>_r(t.commit,e.commit)))}return d}({fs:new he(t),cache:f,gitdir:r,filepath:i,ref:a,depth:s,since:n,force:o,follow:c})}catch(d){throw d.caller="git.log",d}},merge:async function({fs:t,onSign:e,dir:r,gitdir:i=K(r,".git"),ours:a,theirs:s,fastForward:n=!0,fastForwardOnly:o=!1,dryRun:c=!1,noUpdateBranch:f=!1,message:d,author:l,committer:h,signingKey:u,cache:g={}}){try{pe("fs",t),u&&pe("onSign",e);const r=new he(t),w=await ke({fs:r,gitdir:i,author:l});if(!w&&(!o||!n))throw new Ht("author");const p=await Se({fs:r,gitdir:i,author:w,committer:h});if(!p&&(!o||!n))throw new Ht("committer");return await gr({fs:r,cache:g,gitdir:i,ours:a,theirs:s,fastForward:n,fastForwardOnly:o,dryRun:c,noUpdateBranch:f,message:d,author:w,committer:p,signingKey:u,onSign:e})}catch(w){throw w.caller="git.merge",w}},packObjects:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oids:i,write:a=!1,cache:s={}}){try{return pe("fs",t),pe("gitdir",r),pe("oids",i),await async function({fs:t,cache:e,gitdir:r,oids:i,write:a}){const s=await jr({fs:t,cache:e,gitdir:r,oids:i}),n=l.from(await Te(s)),o=`pack-${n.slice(-20).toString("hex")}.pack`;return a?(await t.write(K(r,`objects/pack/${o}`),n),{filename:o}):{filename:o,packfile:new Uint8Array(n)}}({fs:new he(t),cache:s,gitdir:r,oids:i,write:a})}catch(n){throw n.caller="git.packObjects",n}},pull:async function({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c=K(o,".git"),ref:f,url:d,remote:l,remoteRef:h,fastForward:u=!0,fastForwardOnly:g=!1,corsProxy:w,singleBranch:p,headers:m={},author:y,committer:b,signingKey:x,cache:$={}}){try{pe("fs",t),pe("gitdir",c);const v=new he(t),_=await ke({fs:v,gitdir:c,author:y});if(!_)throw new Ht("author");const E=await Se({fs:v,gitdir:c,author:_,committer:b});if(!E)throw new Ht("committer");return await wr({fs:v,cache:$,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c,ref:f,url:d,remote:l,remoteRef:h,fastForward:u,fastForwardOnly:g,corsProxy:w,singleBranch:p,headers:m,author:_,committer:E,signingKey:x})}catch(v){throw v.caller="git.pull",v}},push:async function({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,dir:o,gitdir:c=K(o,".git"),ref:f,remoteRef:d,remote:l="origin",url:h,force:u=!1,delete:g=!1,corsProxy:w,headers:p={},cache:m={}}){try{return pe("fs",t),pe("http",e),pe("gitdir",c),await Ar({fs:new he(t),cache:m,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:s,onAuthFailure:n,gitdir:c,ref:f,remoteRef:d,remote:l,url:h,force:u,delete:g,corsProxy:w,headers:p})}catch(y){throw y.caller="git.push",y}},readBlob:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,filepath:a,cache:s={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),await Ir({fs:new he(t),cache:s,gitdir:r,oid:i,filepath:a})}catch(n){throw n.caller="git.readBlob",n}},readCommit:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,cache:a={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),await vr({fs:new he(t),cache:a,gitdir:r,oid:i})}catch(s){throw s.caller="git.readCommit",s}},readNote:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i="refs/notes/commits",oid:a,cache:s={}}){try{return pe("fs",t),pe("gitdir",r),pe("ref",i),pe("oid",a),await async function({fs:t,cache:e,gitdir:r,ref:i="refs/notes/commits",oid:a}){const s=await ft.resolve({gitdir:r,fs:t,ref:i}),{blob:n}=await Ir({fs:t,cache:e,gitdir:r,oid:s,filepath:a});return n}({fs:new he(t),cache:s,gitdir:r,ref:i,oid:a})}catch(n){throw n.caller="git.readNote",n}},readObject:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,format:a="parsed",filepath:s,encoding:n,cache:o={}}){try{pe("fs",t),pe("gitdir",r),pe("oid",i);const e=new he(t);void 0!==s&&(i=await xe({fs:e,cache:o,gitdir:r,oid:i,filepath:s}));const c="parsed"===a?"content":a,f=await Pt({fs:e,cache:o,gitdir:r,oid:i,format:c});if(f.oid=i,"parsed"===a)switch(f.format="parsed",f.type){case"commit":f.object=ae.from(f.object).parse();break;case"tree":f.object=gt.from(f.object).entries();break;case"blob":n?f.object=f.object.toString(n):(f.object=new Uint8Array(f.object),f.format="content");break;case"tag":f.object=re.from(f.object).parse();break;default:throw new D(f.oid,f.type,"blob|commit|tag|tree")}else"deflated"!==f.format&&"wrapped"!==f.format||(f.type=f.format);return f}catch(c){throw c.caller="git.readObject",c}},readTag:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,cache:a={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),await async function({fs:t,cache:e,gitdir:r,oid:i}){const{type:a,object:s}=await Pt({fs:t,cache:e,gitdir:r,oid:i,format:"content"});if("tag"!==a)throw new D(i,a,"tag");const n=re.from(s);return{oid:i,tag:n.parse(),payload:n.payload()}}({fs:new he(t),cache:a,gitdir:r,oid:i})}catch(s){throw s.caller="git.readTag",s}},readTree:async function({fs:t,dir:e,gitdir:r=K(e,".git"),oid:i,filepath:a,cache:s={}}){try{return pe("fs",t),pe("gitdir",r),pe("oid",i),await ve({fs:new he(t),cache:s,gitdir:r,oid:i,filepath:a})}catch(n){throw n.caller="git.readTree",n}},remove:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i,cache:a={}}){try{pe("fs",t),pe("gitdir",r),pe("filepath",i),await A.acquire({fs:new he(t),gitdir:r,cache:a},(async function(t){t.delete({filepath:i})}))}catch(s){throw s.caller="git.remove",s}},removeNote:async function({fs:t,onSign:e,dir:r,gitdir:i=K(r,".git"),ref:a="refs/notes/commits",oid:s,author:n,committer:o,signingKey:c,cache:f={}}){try{pe("fs",t),pe("gitdir",i),pe("oid",s);const r=new he(t),d=await ke({fs:r,gitdir:i,author:n});if(!d)throw new Ht("author");const l=await Se({fs:r,gitdir:i,author:d,committer:o});if(!l)throw new Ht("committer");return await async function({fs:t,cache:e,onSign:r,gitdir:i,ref:a="refs/notes/commits",oid:s,author:n,committer:o,signingKey:c}){let f;try{f=await ft.resolve({gitdir:i,fs:t,ref:a})}catch(h){if(!(h instanceof U))throw h}let d=(await ve({fs:t,gitdir:i,oid:f||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;d=d.filter((t=>t.path!==s));const l=await _e({fs:t,gitdir:i,tree:d});return await ye({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:l,parent:f&&[f],message:"Note removed by 'isomorphic-git removeNote'\n",author:n,committer:o,signingKey:c})}({fs:r,cache:f,onSign:e,gitdir:i,ref:a,oid:s,author:d,committer:l,signingKey:c})}catch(d){throw d.caller="git.removeNote",d}},renameBranch:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,oldref:a,checkout:s=!1}){try{return pe("fs",t),pe("gitdir",r),pe("ref",i),pe("oldref",a),await async function({fs:t,gitdir:e,oldref:r,ref:i,checkout:a=!1}){if(i!==f.clean(i))throw new Mt(i,f.clean(i));if(r!==f.clean(r))throw new Mt(r,f.clean(r));const s=`refs/heads/${r}`,n=`refs/heads/${i}`;if(await ft.exists({fs:t,gitdir:e,ref:n}))throw new At("branch",i,!1);const o=await ft.resolve({fs:t,gitdir:e,ref:s,depth:1});await ft.writeRef({fs:t,gitdir:e,ref:n,value:o}),await ft.deleteRef({fs:t,gitdir:e,ref:s}),a&&await ft.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:n})}({fs:new he(t),gitdir:r,ref:i,oldref:a,checkout:s})}catch(n){throw n.caller="git.renameBranch",n}},resetIndex:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i,ref:a,cache:s={}}){try{pe("fs",t),pe("gitdir",r),pe("filepath",i);const o=new he(t);let c,f;try{c=await ft.resolve({fs:o,gitdir:r,ref:a||"HEAD"})}catch(n){if(a)throw n}if(c)try{c=await xe({fs:o,cache:s,gitdir:r,oid:c,filepath:i})}catch(n){c=null}let d={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:0,uid:0,gid:0,size:0};const l=e&&await o.read(K(e,i));l&&(f=await Or({gitdir:r,type:"blob",object:l}),c===f&&(d=await o.lstat(K(e,i)))),await A.acquire({fs:o,gitdir:r,cache:s},(async function(t){t.delete({filepath:i}),c&&t.insert({filepath:i,stats:d,oid:c})}))}catch(o){throw o.caller="git.reset",o}},updateIndex:async function({fs:t,dir:e,gitdir:r=K(e,".git"),cache:i={},filepath:a,oid:s,mode:n,add:o,remove:c,force:f}){try{pe("fs",t),pe("gitdir",r),pe("filepath",a);const d=new he(t);if(c)return await A.acquire({fs:d,gitdir:r,cache:i},(async function(t){let r;if(f||(r=await d.lstat(K(e,a)),!r))t.has({filepath:a})&&t.delete({filepath:a});else if(r.isDirectory())throw new Dt("directory")}));let l;if(!s){if(l=await d.lstat(K(e,a)),!l)throw new U(`file at "${a}" on disk and "remove" not set`);if(l.isDirectory())throw new Dt("directory")}return await A.acquire({fs:d,gitdir:r,cache:i},(async function(t){if(!o&&!t.has({filepath:a}))throw new U(`file at "${a}" in index and "add" not set`);let i={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:n,uid:0,gid:0,size:0};if(!s){i=l;const t=i.isSymbolicLink()?await d.readlink(K(e,a)):await d.read(K(e,a));s=await we({fs:d,gitdir:r,type:"blob",format:"content",object:t})}return t.insert({filepath:a,oid:s,stats:i}),s}))}catch(d){throw d.caller="git.updateIndex",d}},resolveRef:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,depth:a}){try{pe("fs",t),pe("gitdir",r),pe("ref",i);return await ft.resolve({fs:new he(t),gitdir:r,ref:i,depth:a})}catch(s){throw s.caller="git.resolveRef",s}},status:async function({fs:t,dir:e,gitdir:r=K(e,".git"),filepath:i,cache:a={}}){try{pe("fs",t),pe("gitdir",r),pe("filepath",i);const s=new he(t);if(await de.isIgnored({fs:s,gitdir:r,dir:e,filepath:i}))return"ignored";const n=await async function({fs:t,cache:e,gitdir:r}){let i;try{i=await ft.resolve({fs:t,gitdir:r,ref:"HEAD"})}catch(s){if(s instanceof U)return[]}const{tree:a}=await ve({fs:t,cache:e,gitdir:r,oid:i});return a}({fs:s,cache:a,gitdir:r}),o=await Br({fs:s,cache:a,gitdir:r,tree:n,path:i}),c=await A.acquire({fs:s,gitdir:r,cache:a},(async function(t){for(const e of t)if(e.path===i)return e;return null})),f=await s.lstat(K(e,i)),d=null!==o,l=null!==c,h=null!==f,u=async()=>{if(l&&!S(c,f))return c.oid;{const t=await s.read(K(e,i)),n=await Or({gitdir:r,type:"blob",object:t});return l&&c.oid===n&&-1!==f.size&&A.acquire({fs:s,gitdir:r,cache:a},(async function(t){t.insert({filepath:i,stats:f,oid:n})})),n}};if(!d&&!h&&!l)return"absent";if(!d&&!h&&l)return"*absent";if(!d&&h&&!l)return"*added";if(!d&&h&&l){return await u()===c.oid?"added":"*added"}if(d&&!h&&!l)return"deleted";if(d&&!h&&l)return c.oid,"*deleted";if(d&&h&&!l){return await u()===o?"*undeleted":"*undeletemodified"}if(d&&h&&l){const t=await u();return t===o?t===c.oid?"unmodified":"*unmodified":t===c.oid?"modified":"*modified"}}catch(s){throw s.caller="git.status",s}},statusMatrix:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i="HEAD",filepaths:a=["."],filter:s,cache:n={},ignored:o=!1}){try{pe("fs",t),pe("gitdir",r),pe("ref",i);const c=new he(t);return await Ie({fs:c,cache:n,dir:e,gitdir:r,trees:[oe({ref:i}),fe(),C()],map:async function(t,[r,i,n]){if(!r&&!n&&i&&!o){if(await de.isIgnored({fs:c,dir:e,filepath:t}))return null}if(!a.some((e=>Oe(t,e))))return null;if(s&&!s(t))return;const[f,d,l]=await Promise.all([r&&r.type(),i&&i.type(),n&&n.type()]),h=[f,d,l].includes("blob");if(("tree"===f||"special"===f)&&!h)return;if("commit"===f)return null;if(("tree"===d||"special"===d)&&!h)return;if("commit"===l)return null;if(("tree"===l||"special"===l)&&!h)return;const u="blob"===f?await r.oid():void 0,g="blob"===l?await n.oid():void 0;let w;"blob"!==f&&"blob"===d&&"blob"!==l?w="42":"blob"===d&&(w=await i.oid());const p=[void 0,u,w,g],m=p.map((t=>p.indexOf(t)));return m.shift(),[t,...m]}})}catch(c){throw c.caller="git.statusMatrix",c}},tag:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,object:a,force:s=!1}){try{pe("fs",t),pe("gitdir",r),pe("ref",i);const e=new he(t);if(void 0===i)throw new zt("ref");i=i.startsWith("refs/tags/")?i:`refs/tags/${i}`;const n=await ft.resolve({fs:e,gitdir:r,ref:a||"HEAD"});if(!s&&await ft.exists({fs:e,gitdir:r,ref:i}))throw new At("tag",i);await ft.writeRef({fs:e,gitdir:r,ref:i,value:n})}catch(n){throw n.caller="git.tag",n}},version:function(){try{return er}catch(t){throw t.caller="git.version",t}},walk:async function({fs:t,dir:e,gitdir:r=K(e,".git"),trees:i,map:a,reduce:s,iterate:n,cache:o={}}){try{return pe("fs",t),pe("gitdir",r),pe("trees",i),await Ie({fs:new he(t),cache:o,dir:e,gitdir:r,trees:i,map:a,reduce:s,iterate:n})}catch(c){throw c.caller="git.walk",c}},writeBlob:async function({fs:t,dir:e,gitdir:r=K(e,".git"),blob:i}){try{return pe("fs",t),pe("gitdir",r),pe("blob",i),await we({fs:new he(t),gitdir:r,type:"blob",object:i,format:"content"})}catch(a){throw a.caller="git.writeBlob",a}},writeCommit:async function({fs:t,dir:e,gitdir:r=K(e,".git"),commit:i}){try{return pe("fs",t),pe("gitdir",r),pe("commit",i),await async function({fs:t,gitdir:e,commit:r}){const i=ae.from(r).toObject();return await we({fs:t,gitdir:e,type:"commit",object:i,format:"content"})}({fs:new he(t),gitdir:r,commit:i})}catch(a){throw a.caller="git.writeCommit",a}},writeObject:async function({fs:t,dir:e,gitdir:r=K(e,".git"),type:i,object:a,format:s="parsed",oid:n,encoding:o}){try{const e=new he(t);if("parsed"===s){switch(i){case"commit":a=ae.from(a).toObject();break;case"tree":a=gt.from(a).toObject();break;case"blob":a=l.from(a,o);break;case"tag":a=re.from(a).toObject();break;default:throw new D(n||"",i,"blob|commit|tag|tree")}s="content"}return n=await we({fs:e,gitdir:r,type:i,object:a,oid:n,format:s})}catch(c){throw c.caller="git.writeObject",c}},writeRef:async function({fs:t,dir:e,gitdir:r=K(e,".git"),ref:i,value:a,force:s=!1,symbolic:n=!1}){try{pe("fs",t),pe("gitdir",r),pe("ref",i),pe("value",a);const e=new he(t);if(i!==f.clean(i))throw new Mt(i,f.clean(i));if(!s&&await ft.exists({fs:e,gitdir:r,ref:i}))throw new At("ref",i);n?await ft.writeSymbolicRef({fs:e,gitdir:r,ref:i,value:a}):(a=await ft.resolve({fs:e,gitdir:r,ref:a}),await ft.writeRef({fs:e,gitdir:r,ref:i,value:a}))}catch(o){throw o.caller="git.writeRef",o}},writeTag:async function({fs:t,dir:e,gitdir:r=K(e,".git"),tag:i}){try{return pe("fs",t),pe("gitdir",r),pe("tag",i),await async function({fs:t,gitdir:e,tag:r}){const i=re.from(r).toObject();return await we({fs:t,gitdir:e,type:"tag",object:i,format:"content"})}({fs:new he(t),gitdir:r,tag:i})}catch(a){throw a.caller="git.writeTag",a}},writeTree:async function({fs:t,dir:e,gitdir:r=K(e,".git"),tree:i}){try{return pe("fs",t),pe("gitdir",r),pe("tree",i),await _e({fs:new he(t),gitdir:r,tree:i})}catch(a){throw a.caller="git.writeTree",a}}};e.ZP=Nr}}]);