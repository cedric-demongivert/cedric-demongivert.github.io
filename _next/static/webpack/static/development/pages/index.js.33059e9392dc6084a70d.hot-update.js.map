{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.33059e9392dc6084a70d.hot-update.js","sources":["webpack:///./components/Spell.tsx"],"sourcesContent":["import React from 'react'\r\nimport { ReactElement } from 'react'\r\nimport { ReactNode } from 'react'\r\nimport classNames from 'classnames'\r\n\r\nfunction * range (size : number) : Iterable<number> {\r\n  for (let index = 0; index < size; ++index) {\r\n    yield index\r\n  }\r\n}\r\n\r\nexport function Spell (props : any) : ReactElement {\r\n  const runesByRow : number = Math.ceil(props.runes.length / props.rows)\r\n\r\n  return (\r\n    <div className='spells'>\r\n      <div key={0} className={classNames('spell d-none d-md-flex', props.className)}>\r\n        {\r\n          [...range(props.rows)].map(function (index : number) : ReactElement[] {\r\n            const runes : ReactElement[] = []\r\n\r\n            if (index > 0) {\r\n              runes.push(\r\n                <div key={props.runes.length + index} className='w-100' />\r\n              )\r\n            }\r\n\r\n            for (let rune = 0; rune < runesByRow; ++rune) {\r\n              runes.push(\r\n                <img key={rune * props.rows + index} className='spell-rune' src={'./images/runic-' + props.runes[rune * props.rows + index] + '.svg'} />\r\n              )\r\n            }\r\n\r\n            return runes\r\n          }).reduce(function (a : ReactElement[], b : ReactElement[]) : ReactElement[] {\r\n            return a.concat(b)\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div key={1} className={classNames('spell d-flex d-md-none', props.className)}>\r\n        {\r\n          props.runes.map(function (rune : string, index : number) : ReactElement {\r\n            return <img key={index} className='spell-rune' src={'./images/runic-' + rune + '.svg'} />\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AANA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}