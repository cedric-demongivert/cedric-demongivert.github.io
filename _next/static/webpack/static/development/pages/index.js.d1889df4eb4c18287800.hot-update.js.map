{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d1889df4eb4c18287800.hot-update.js","sources":["webpack:///./content/rules/core/SelfResolutionRule.tsx"],"sourcesContent":["import React from 'react'\r\nimport { ReactElement } from 'react'\r\nimport { ReactNode } from 'react'\r\n\r\nimport { SubjectSummary } from '../../../components/subject/SubjectSummary'\r\nimport { SubjectContent } from '../../../components/subject/SubjectContent'\r\nimport { SubjectTitle } from '../../../components/subject/SubjectTitle'\r\nimport { SubjectKeyword } from '../../../components/subject/SubjectKeyword'\r\nimport { SubjectIdentifier } from '../../../components/subject/SubjectIdentifier'\r\nimport { Subject } from '../../../components/subject/Subject'\r\nimport { Table2D } from '../../../components/table/Table2D'\r\n\r\nfunction range (value : number) : number[] {\r\n  const result : number[] = []\r\n\r\n  for (let index = 0; index <= value; ++index) {\r\n    result.push(index)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport function SelfResolutionRule () : ReactElement {\r\n  return (\r\n    <Subject>\r\n      <SubjectIdentifier>rules-core-self-resolution</SubjectIdentifier>\r\n      <SubjectKeyword>Règle</SubjectKeyword>\r\n      <SubjectKeyword>Règle principale</SubjectKeyword>\r\n      <SubjectKeyword>Résolution</SubjectKeyword>\r\n      <SubjectKeyword>Auto-résolution</SubjectKeyword>\r\n      <SubjectTitle>Auto-résolution</SubjectTitle>\r\n      <SubjectSummary>\r\n\r\n      </SubjectSummary>\r\n      <SubjectContent>\r\n        <p>\r\n          <em>Définition.</em> L'auto-résolution permet de mesurer la qualité\r\n          de la réussite d'une action en fonction des capacités seules d'un\r\n          personnage. C'est le test pour mesurer la dangerosité d'un piège\r\n          installé, la fiabilité d'une serrure ou la qualité d'une production\r\n          d'alchimie. L'auto-résolution produit donc un  degré de difficulté\r\n          ou une qualité dépendamment que la production soit une épreuve ou\r\n          un objet.\r\n        </p>\r\n\r\n        <table className='table-1d' style={{width: 20 * 35 + 'px'}}>\r\n          <tbody>\r\n            <tr>\r\n              <td> &lfloor;&divide;5&rfloor; </td>\r\n              <td> &lfloor;&divide;4&rfloor; </td>\r\n              <td> &lfloor;&divide;3&rfloor; </td>\r\n              <td> &lfloor;&divide;3&rfloor; </td>\r\n              <td> -2 </td>\r\n              <td> -2 </td>\r\n              <td> -1</td>\r\n              <td> -1 </td>\r\n              <td> +0</td>\r\n              <td> +0</td>\r\n              <td> +0</td>\r\n              <td> +0</td>\r\n              <td> +0</td>\r\n              <td> +0</td>\r\n              <td> +1</td>\r\n              <td> +1</td>\r\n              <td> +1</td>\r\n              <td> +2</td>\r\n              <td> +2</td>\r\n              <td> +3</td>\r\n            </tr>\r\n            <tr>\r\n              {\r\n                range(19).map(function renderRow (index : number) : ReactNode {\r\n                  return (\r\n                    <th key={index} style={{width: '35px'}}>\r\n                      {(index + 1)}\r\n                    </th>\r\n                  )\r\n                })\r\n              }\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <Table2D className='text-center'>\r\n            {\r\n              range(20).map(function renderRow (index : number) : ReactNode {\r\n                return (\r\n                  <Table2D.Row key={index}>\r\n                    <Table2D.Cell heading>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.floor(index / 5)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.floor(index / 4)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.floor(index / 3)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.floor(index / 3)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.max(index - 2, 0)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.max(index - 2, 0)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.max(index - 1, 0)}</Table2D.Cell>\r\n                    <Table2D.Cell>{Math.max(index - 1, 0)}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 1}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 1}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 1}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 2}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 2}</Table2D.Cell>\r\n                    <Table2D.Cell>{index + 3}</Table2D.Cell>\r\n                  </Table2D.Row>\r\n                )\r\n              }).reverse()\r\n            }\r\n            <Table2D.Row>\r\n              <th style={{width: '35px'}}></th>\r\n              {\r\n                range(19).map(function renderRow (index : number) : ReactNode {\r\n                  return (\r\n                    <Table2D.Cell heading key={index} width='35px'>\r\n                      {index + 1}\r\n                    </Table2D.Cell>\r\n                  )\r\n                })\r\n              }\r\n            </Table2D.Row>\r\n        </Table2D>\r\n\r\n      </SubjectContent>\r\n    </Subject>\r\n  )\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAQA;;;;A","sourceRoot":""}