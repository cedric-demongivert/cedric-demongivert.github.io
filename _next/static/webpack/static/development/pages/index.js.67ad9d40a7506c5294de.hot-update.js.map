{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.67ad9d40a7506c5294de.hot-update.js","sources":["webpack:///./components/table/Table2D.tsx"],"sourcesContent":["import React from 'react'\r\nimport { ReactElement } from 'react'\r\nimport { ReactNode } from 'react'\r\nimport { Component } from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport { Table2DCell } from './Table2DCell'\r\nimport { Table2DRow } from './Table2DRow'\r\n\r\nexport class Table2D extends Component<Table2D.Properties, Table2D.State> {\r\n  private _rows : number\r\n  private _columns : number\r\n  private _handlers : (() => void)[]\r\n\r\n  /**\r\n  * @see Component.constructor\r\n  */\r\n  public constructor (props : Table2D.Properties) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      column: -1,\r\n      row: -1\r\n    }\r\n\r\n    this._rows = 0\r\n    this._columns = 0\r\n    this._handlers = []\r\n\r\n    this.computeCellSelectionHandlers(props.children)\r\n\r\n    this.handleDeselection = this.handleDeselection.bind(this)\r\n    this.renderRow = this.renderRow.bind(this)\r\n  }\r\n\r\n  /**\r\n  *\r\n  */\r\n  private computeCellSelectionHandlers (children : ReactNode) : void {\r\n    this._rows = React.Children.count(children)\r\n    this._columns = React.Children.map(\r\n      children,\r\n      (child : ReactElement<Table2DRow.Properties>) => React.Children.count(\r\n        child.props.children\r\n      )\r\n    ).reduce((a : number, b : number) => Math.max(a, b), 0)\r\n\r\n    this._handlers.length = 0\r\n\r\n    for (let row = 0; row < this._rows; ++row) {\r\n      for (let column = 0; column < this._columns; ++column) {\r\n        this._handlers.push(this.handleCellSelection.bind(this, column, row))\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  *\r\n  */\r\n  public handleCellSelection (column : number, row : number) : void {\r\n    this.setState({ row, column })\r\n  }\r\n\r\n  /**\r\n  *\r\n  */\r\n  public handleDeselection () : void {\r\n    this.setState({ row: -1, column: -1 })\r\n  }\r\n\r\n  /**\r\n  * @param Component.shouldComponentUpdate\r\n  */\r\n  public shouldComponentUpdate (nextProps : Table2D.Properties) : boolean {\r\n    if (nextProps.children !== this.props.children) {\r\n      this.computeCellSelectionHandlers(nextProps.children)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n  * @param Component.render\r\n  */\r\n  public render () : ReactElement {\r\n    const className : string = classNames('table-2d', this.props.className)\r\n    const properties : any = {\r\n      className,\r\n      onMouseOut: this.handleDeselection\r\n    }\r\n\r\n    if (this.props.width) {\r\n      properties.style = { width: this.props.width }\r\n    }\r\n\r\n    return (\r\n      <table {...properties}>\r\n        <tbody>\r\n          { React.Children.map(this.props.children, this.renderRow) }\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n\r\n  /**\r\n  *\r\n  */\r\n  private renderRow (children : ReactElement<Table2DRow.Properties>, row : number) : ReactElement<Table2DRow.Properties> {\r\n    return React.cloneElement(\r\n      children, {},\r\n      React.Children.map(\r\n        children.props.children,\r\n        (cell : ReactElement<Table2DCell.Properties>, column : number) : ReactElement<Table2DCell.Properties> => React.cloneElement(\r\n          cell, {\r\n            onSelect: this._handlers[row * this._columns + column],\r\n            selected: (\r\n              this.state.row === this._rows - 1 && column === this.state.column ||\r\n              this.state.column === 0 && row === this.state.row  ||\r\n              this.state.row  !== this._rows - 1 && this.state.column !== 0 && (\r\n                column === this.state.column || row === this.state.row\r\n              )\r\n            )\r\n          }\r\n        )\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\nexport namespace Table2D {\r\n  export const Cell = Table2DCell\r\n  export const Row = Table2DRow\r\n\r\n  export type Properties = {\r\n    className?: string,\r\n    children?: ReactNode,\r\n    width?: string\r\n  }\r\n\r\n  export type State = {\r\n    row: number,\r\n    column: number\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAIA;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AAEA;;;;;AA1BA;AAAA;AAAA;AA8BA;AACA;AAEA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AA/CA;AAAA;AAAA;AAmDA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AAtDA;AAAA;AAAA;AA0DA;AAAA;AAAA;AAAA;AACA;AAEA;;;;AA7DA;AAAA;AAAA;AAiEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAxEA;AAAA;AAAA;AA4EA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;AA/FA;AAAA;AAAA;AAkGA;AACA;AAAA;AAIA;AAEA;AACA;AAFA;AADA;AAcA;AArHA;AACA;AADA;AAAA;AACA;;AAwHA;AACA;AAFA;;;;A","sourceRoot":""}